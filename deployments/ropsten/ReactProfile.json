{
  "address": "0xe10Ec5809683239F00916Cc5770a98817dE8Be0E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_cakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_numberCakeToReactivate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberCakeToRegister",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberCakeToUpdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "teamName",
          "type": "string"
        }
      ],
      "name": "TeamAdd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberPoints",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "TeamPointIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTeamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTeamId",
          "type": "uint256"
        }
      ],
      "name": "UserChangeTeam",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "UserNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "UserPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberPoints",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "UserPointIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "userAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberPoints",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "UserPointIncreaseMultiple",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "UserReactivate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "UserUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POINT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPECIAL_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "addNftAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_teamName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_teamDescription",
          "type": "string"
        }
      ],
      "name": "addTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newTeamId",
          "type": "uint256"
        }
      ],
      "name": "changeTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_teamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "createProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_teamId",
          "type": "uint256"
        }
      ],
      "name": "getTeamProfile",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserProfile",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_teamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "increaseTeamPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_numberPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "increaseUserPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_userAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_numberPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "increaseUserPointsMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_teamId",
          "type": "uint256"
        }
      ],
      "name": "makeTeamJoinable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_teamId",
          "type": "uint256"
        }
      ],
      "name": "makeTeamNotJoinable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberActiveProfiles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCakeToReactivate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCakeToRegister",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCakeToUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberTeams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reactivateProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_teamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberPoints",
          "type": "uint256"
        }
      ],
      "name": "removeTeamPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_numberPoints",
          "type": "uint256"
        }
      ],
      "name": "removeUserPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_userAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_numberPoints",
          "type": "uint256"
        }
      ],
      "name": "removeUserPointsMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_teamId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_teamName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_teamDescription",
          "type": "string"
        }
      ],
      "name": "renameTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newNumberCakeToReactivate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newNumberCakeToRegister",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newNumberCakeToUpdate",
          "type": "uint256"
        }
      ],
      "name": "updateNumberCake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "updateProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x840bd1a98388811266ee12f67fac7ecc088fd967f38e73fea4578c24660179c7",
  "receipt": {
    "to": null,
    "from": "0x88888887C3ebD4a33E34a15Db4254C74C75E5D4A",
    "contractAddress": "0xe10Ec5809683239F00916Cc5770a98817dE8Be0E",
    "transactionIndex": 0,
    "gasUsed": "3008170",
    "logsBloom": "0x
    "blockHash": "0x28b3e141fe9b46a23a2101b50c630ead3ab4ec2bb7461dc8d43e42fdbaa5c5a7",
    "transactionHash": "0x840bd1a98388811266ee12f67fac7ecc088fd967f38e73fea4578c24660179c7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11907887,
        "transactionHash": "0x840bd1a98388811266ee12f67fac7ecc088fd967f38e73fea4578c24660179c7",
        "address": "0xe10Ec5809683239F00916Cc5770a98817dE8Be0E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000088888887c3ebd4a33e34a15db4254c74c75e5d4a",
          "0x00000000000000000000000088888887c3ebd4a33e34a15db4254c74c75e5d4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x28b3e141fe9b46a23a2101b50c630ead3ab4ec2bb7461dc8d43e42fdbaa5c5a7"
      }
    ],
    "blockNumber": 11907887,
    "cumulativeGasUsed": "3008170",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2925293d027391eD3CC24bf4a4B80D072FCBB714",
    "1000000000000000000",
    "1000000000000000000",
    "1000000000000000000"
  ],
  "solcInputHash": "dac350dcdb2b51afef353dcc77743026",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberCakeToReactivate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberCakeToRegister\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberCakeToUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"}],\"name\":\"TeamAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberPoints\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"TeamPointIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTeamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTeamId\",\"type\":\"uint256\"}],\"name\":\"UserChangeTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UserNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"UserPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberPoints\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"UserPointIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberPoints\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"UserPointIncreaseMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UserReactivate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UserUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"addNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_teamDescription\",\"type\":\"string\"}],\"name\":\"addTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newTeamId\",\"type\":\"uint256\"}],\"name\":\"changeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"}],\"name\":\"getTeamProfile\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserProfile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"increaseTeamPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"increaseUserPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"increaseUserPointsMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"}],\"name\":\"makeTeamJoinable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"}],\"name\":\"makeTeamNotJoinable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberActiveProfiles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCakeToReactivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCakeToRegister\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCakeToUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberTeams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reactivateProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"}],\"name\":\"removeTeamPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"}],\"name\":\"removeUserPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"}],\"name\":\"removeUserPointsMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_teamDescription\",\"type\":\"string\"}],\"name\":\"renameTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newNumberCakeToReactivate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newNumberCakeToRegister\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newNumberCakeToUpdate\",\"type\":\"uint256\"}],\"name\":\"updateNumberCake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"It is a contract for users to bind their address to a customizable profile by depositing a NFT.\",\"kind\":\"dev\",\"methods\":{\"addNftAddress(address)\":{\"details\":\"To add a NFT contract address for users to set their profile. Callable only by owner admins.\"},\"addTeam(string,string)\":{\"details\":\"Add a new teamId Callable only by owner admins.\"},\"changeTeam(address,uint256)\":{\"details\":\"Function to change team. Callable only by special admins.\"},\"claimFee(uint256)\":{\"details\":\"Claim CAKE to burn later. Callable only by owner admins.\"},\"createProfile(uint256,address,uint256)\":{\"details\":\"To create a user profile. It sends the NFT to the contract and sends CAKE to burn address. Requires 2 token approvals.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTeamProfile(uint256)\":{\"details\":\"Check a team's profile\"},\"getUserProfile(address)\":{\"details\":\"Check the user's profile for a given address\"},\"getUserStatus(address)\":{\"details\":\"Check the user's status for a given address\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseTeamPoints(uint256,uint256,uint256)\":{\"details\":\"To increase the number of points for a team. Callable only by point admins\"},\"increaseUserPoints(address,uint256,uint256)\":{\"details\":\"To increase the number of points for a user. Callable only by point admins\"},\"increaseUserPointsMultiple(address[],uint256,uint256)\":{\"details\":\"To increase the number of points for a set of users. Callable only by point admins\"},\"makeTeamJoinable(uint256)\":{\"details\":\"Make a team joinable again. Callable only by owner admins.\"},\"makeTeamNotJoinable(uint256)\":{\"details\":\"Make a team not joinable. Callable only by owner admins.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"pauseProfile()\":{\"details\":\"To pause user profile. It releases the NFT. Callable only by registered users.\"},\"reactivateProfile(address,uint256)\":{\"details\":\"To reactivate user profile. Callable only by registered users.\"},\"removeTeamPoints(uint256,uint256)\":{\"details\":\"To remove the number of points for a team. Callable only by point admins\"},\"removeUserPoints(address,uint256)\":{\"details\":\"To remove the number of points for a user. Callable only by point admins\"},\"removeUserPointsMultiple(address[],uint256)\":{\"details\":\"To remove a set number of points for a set of users.\"},\"renameTeam(uint256,string,string)\":{\"details\":\"Rename a team Callable only by owner admins.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateNumberCake(uint256,uint256,uint256)\":{\"details\":\"Update the number of CAKE to register Callable only by owner admins.\"},\"updateProfile(address,uint256)\":{\"details\":\"To update user profile. Callable only by registered users.\"}},\"title\":\"ReactProfile.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReactProfile.sol\":\"ReactProfile\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ReactProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n\\n/**\\n * @title ReactProfile.\\n * @dev It is a contract for users to bind their address\\n * to a customizable profile by depositing a NFT.\\n */\\ncontract ReactProfile is AccessControl, ERC721Holder {\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IERC20 public cakeToken;\\n\\n    bytes32 public constant NFT_ROLE = keccak256(\\\"NFT_ROLE\\\");\\n    bytes32 public constant POINT_ROLE = keccak256(\\\"POINT_ROLE\\\");\\n    bytes32 public constant SPECIAL_ROLE = keccak256(\\\"SPECIAL_ROLE\\\");\\n\\n    uint256 public numberActiveProfiles;\\n    uint256 public numberCakeToReactivate;\\n    uint256 public numberCakeToRegister;\\n    uint256 public numberCakeToUpdate;\\n    uint256 public numberTeams;\\n\\n    mapping(address => bool) public hasRegistered;\\n\\n    mapping(uint256 => Team) private teams;\\n    mapping(address => User) private users;\\n\\n    // Used for generating the teamId\\n    Counters.Counter private _countTeams;\\n\\n    // Used for generating the userId\\n    Counters.Counter private _countUsers;\\n\\n    // Event to notify a new team is created\\n    event TeamAdd(uint256 teamId, string teamName);\\n\\n    // Event to notify that team points are increased\\n    event TeamPointIncrease(\\n        uint256 indexed teamId,\\n        uint256 numberPoints,\\n        uint256 indexed campaignId\\n    );\\n\\n    event UserChangeTeam(\\n        address indexed userAddress,\\n        uint256 oldTeamId,\\n        uint256 newTeamId\\n    );\\n\\n    // Event to notify that a user is registered\\n    event UserNew(\\n        address indexed userAddress,\\n        uint256 teamId,\\n        address nftAddress,\\n        uint256 tokenId\\n    );\\n\\n    // Event to notify a user pausing her profile\\n    event UserPause(address indexed userAddress, uint256 teamId);\\n\\n    // Event to notify that user points are increased\\n    event UserPointIncrease(\\n        address indexed userAddress,\\n        uint256 numberPoints,\\n        uint256 indexed campaignId\\n    );\\n\\n    // Event to notify that a list of users have an increase in points\\n    event UserPointIncreaseMultiple(\\n        address[] userAddresses,\\n        uint256 numberPoints,\\n        uint256 indexed campaignId\\n    );\\n\\n    // Event to notify that a user is reactivating her profile\\n    event UserReactivate(\\n        address indexed userAddress,\\n        uint256 teamId,\\n        address nftAddress,\\n        uint256 tokenId\\n    );\\n\\n    // Event to notify that a user is pausing her profile\\n    event UserUpdate(\\n        address indexed userAddress,\\n        address nftAddress,\\n        uint256 tokenId\\n    );\\n\\n    // Modifier for admin roles\\n    modifier onlyOwner() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Not the main admin\\\"\\n        );\\n        _;\\n    }\\n\\n    // Modifier for point roles\\n    modifier onlyPoint() {\\n        require(hasRole(POINT_ROLE, _msgSender()), \\\"Not a point admin\\\");\\n        _;\\n    }\\n\\n    // Modifier for special roles\\n    modifier onlySpecial() {\\n        require(hasRole(SPECIAL_ROLE, _msgSender()), \\\"Not a special admin\\\");\\n        _;\\n    }\\n\\n    struct Team {\\n        string teamName;\\n        string teamDescription;\\n        uint256 numberUsers;\\n        uint256 numberPoints;\\n        bool isJoinable;\\n    }\\n\\n    struct User {\\n        uint256 userId;\\n        uint256 numberPoints;\\n        uint256 teamId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        bool isActive;\\n    }\\n\\n    constructor(\\n        IERC20 _cakeToken,\\n        uint256 _numberCakeToReactivate,\\n        uint256 _numberCakeToRegister,\\n        uint256 _numberCakeToUpdate\\n    ) public {\\n        cakeToken = _cakeToken;\\n        numberCakeToReactivate = _numberCakeToReactivate;\\n        numberCakeToRegister = _numberCakeToRegister;\\n        numberCakeToUpdate = _numberCakeToUpdate;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev To create a user profile. It sends the NFT to the contract\\n     * and sends CAKE to burn address. Requires 2 token approvals.\\n     */\\n    function createProfile(\\n        uint256 _teamId,\\n        address _nftAddress,\\n        uint256 _tokenId\\n    ) external {\\n        require(!hasRegistered[_msgSender()], \\\"Already registered\\\");\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"Invalid teamId\\\");\\n        require(teams[_teamId].isJoinable, \\\"Team not joinable\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n\\n        // Loads the interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(_nftAddress);\\n\\n        require(\\n            _msgSender() == nftToken.ownerOf(_tokenId),\\n            \\\"Only NFT owner can register\\\"\\n        );\\n\\n        // Transfer NFT to this contract\\n        nftToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Transfer CAKE tokens to this contract\\n        cakeToken.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            numberCakeToRegister\\n        );\\n\\n        // Increment the _countUsers counter and get userId\\n        _countUsers.increment();\\n        uint256 newUserId = _countUsers.current();\\n\\n        // Add data to the struct for newUserId\\n        users[_msgSender()] = User({\\n        userId: newUserId,\\n        numberPoints: 0,\\n        teamId: _teamId,\\n        nftAddress: _nftAddress,\\n        tokenId: _tokenId,\\n        isActive: true\\n        });\\n\\n        // Update registration status\\n        hasRegistered[_msgSender()] = true;\\n\\n        // Update number of active profiles\\n        numberActiveProfiles = numberActiveProfiles.add(1);\\n\\n        // Increase the number of users for the team\\n        teams[_teamId].numberUsers = teams[_teamId].numberUsers.add(1);\\n\\n        // Emit an event\\n        emit UserNew(_msgSender(), _teamId, _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To pause user profile. It releases the NFT.\\n     * Callable only by registered users.\\n     */\\n    function pauseProfile() external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n\\n        // Checks whether user has already paused\\n        require(users[_msgSender()].isActive, \\\"User not active\\\");\\n\\n        // Change status of user to make it inactive\\n        users[_msgSender()].isActive = false;\\n\\n        // Retrieve the teamId of the user calling\\n        uint256 userTeamId = users[_msgSender()].teamId;\\n\\n        // Reduce number of active users and team users\\n        teams[userTeamId].numberUsers = teams[userTeamId].numberUsers.sub(1);\\n        numberActiveProfiles = numberActiveProfiles.sub(1);\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(users[_msgSender()].nftAddress);\\n\\n        // tokenId of NFT redeemed\\n        uint256 redeemedTokenId = users[_msgSender()].tokenId;\\n\\n        // Change internal statuses as extra safety\\n        users[_msgSender()].nftAddress = address(\\n            0x0000000000000000000000000000000000000000\\n        );\\n\\n        users[_msgSender()].tokenId = 0;\\n\\n        // Transfer the NFT back to the user\\n        nftToken.safeTransferFrom(address(this), _msgSender(), redeemedTokenId);\\n\\n        // Emit event\\n        emit UserPause(_msgSender(), userTeamId);\\n    }\\n\\n    /**\\n     * @dev To update user profile.\\n     * Callable only by registered users.\\n     */\\n    function updateProfile(address _nftAddress, uint256 _tokenId) external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n        require(users[_msgSender()].isActive, \\\"User not active\\\");\\n\\n        address currentAddress = users[_msgSender()].nftAddress;\\n        uint256 currentTokenId = users[_msgSender()].tokenId;\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftNewToken = IERC721(_nftAddress);\\n\\n        require(\\n            _msgSender() == nftNewToken.ownerOf(_tokenId),\\n            \\\"Only NFT owner can update\\\"\\n        );\\n\\n        // Transfer token to new address\\n        nftNewToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Transfer CAKE token to this address\\n        cakeToken.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            numberCakeToUpdate\\n        );\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftCurrentToken = IERC721(currentAddress);\\n\\n        // Transfer old token back to the owner\\n        nftCurrentToken.safeTransferFrom(\\n            address(this),\\n            _msgSender(),\\n            currentTokenId\\n        );\\n\\n        // Update mapping in storage\\n        users[_msgSender()].nftAddress = _nftAddress;\\n        users[_msgSender()].tokenId = _tokenId;\\n\\n        emit UserUpdate(_msgSender(), _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To reactivate user profile.\\n     * Callable only by registered users.\\n     */\\n    function reactivateProfile(address _nftAddress, uint256 _tokenId) external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n        require(!users[_msgSender()].isActive, \\\"User is active\\\");\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(_nftAddress);\\n        require(\\n            _msgSender() == nftToken.ownerOf(_tokenId),\\n            \\\"Only NFT owner can update\\\"\\n        );\\n\\n        // Transfer to this address\\n        cakeToken.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            numberCakeToReactivate\\n        );\\n\\n        // Transfer NFT to contract\\n        nftToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Retrieve teamId of the user\\n        uint256 userTeamId = users[_msgSender()].teamId;\\n\\n        // Update number of users for the team and number of active profiles\\n        teams[userTeamId].numberUsers = teams[userTeamId].numberUsers.add(1);\\n        numberActiveProfiles = numberActiveProfiles.add(1);\\n\\n        // Update user statuses\\n        users[_msgSender()].isActive = true;\\n        users[_msgSender()].nftAddress = _nftAddress;\\n        users[_msgSender()].tokenId = _tokenId;\\n\\n        // Emit event\\n        emit UserReactivate(_msgSender(), userTeamId, _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a user.\\n     * Callable only by point admins\\n     */\\n    function increaseUserPoints(\\n        address _userAddress,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        // Increase the number of points for the user\\n        users[_userAddress].numberPoints = users[_userAddress].numberPoints.add(\\n            _numberPoints\\n        );\\n\\n        emit UserPointIncrease(_userAddress, _numberPoints, _campaignId);\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a set of users.\\n     * Callable only by point admins\\n     */\\n    function increaseUserPointsMultiple(\\n        address[] calldata _userAddresses,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        require(_userAddresses.length < 1001, \\\"Length must be < 1001\\\");\\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\\n            users[_userAddresses[i]].numberPoints = users[_userAddresses[i]]\\n            .numberPoints\\n            .add(_numberPoints);\\n        }\\n        emit UserPointIncreaseMultiple(\\n            _userAddresses,\\n            _numberPoints,\\n            _campaignId\\n        );\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a team.\\n     * Callable only by point admins\\n     */\\n\\n    function increaseTeamPoints(\\n        uint256 _teamId,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        // Increase the number of points for the team\\n        teams[_teamId].numberPoints = teams[_teamId].numberPoints.add(\\n            _numberPoints\\n        );\\n\\n        emit TeamPointIncrease(_teamId, _numberPoints, _campaignId);\\n    }\\n\\n    /**\\n     * @dev To remove the number of points for a user.\\n     * Callable only by point admins\\n     */\\n    function removeUserPoints(address _userAddress, uint256 _numberPoints)\\n    external\\n    onlyPoint\\n    {\\n        // Increase the number of points for the user\\n        users[_userAddress].numberPoints = users[_userAddress].numberPoints.sub(\\n            _numberPoints\\n        );\\n    }\\n\\n    /**\\n     * @dev To remove a set number of points for a set of users.\\n     */\\n    function removeUserPointsMultiple(\\n        address[] calldata _userAddresses,\\n        uint256 _numberPoints\\n    ) external onlyPoint {\\n        require(_userAddresses.length < 1001, \\\"Length must be < 1001\\\");\\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\\n            users[_userAddresses[i]].numberPoints = users[_userAddresses[i]]\\n            .numberPoints\\n            .sub(_numberPoints);\\n        }\\n    }\\n\\n    /**\\n     * @dev To remove the number of points for a team.\\n     * Callable only by point admins\\n     */\\n\\n    function removeTeamPoints(uint256 _teamId, uint256 _numberPoints)\\n    external\\n    onlyPoint\\n    {\\n        // Increase the number of points for the team\\n        teams[_teamId].numberPoints = teams[_teamId].numberPoints.sub(\\n            _numberPoints\\n        );\\n    }\\n\\n    /**\\n     * @dev To add a NFT contract address for users to set their profile.\\n     * Callable only by owner admins.\\n     */\\n    function addNftAddress(address _nftAddress) external onlyOwner {\\n        require(\\n            IERC721(_nftAddress).supportsInterface(0x80ac58cd),\\n            \\\"Not ERC721\\\"\\n        );\\n        grantRole(NFT_ROLE, _nftAddress);\\n    }\\n\\n    /**\\n     * @dev Add a new teamId\\n     * Callable only by owner admins.\\n     */\\n    function addTeam(\\n        string calldata _teamName,\\n        string calldata _teamDescription\\n    ) external onlyOwner {\\n        // Verify length is between 3 and 16\\n        bytes memory strBytes = bytes(_teamName);\\n        require(strBytes.length < 20, \\\"Must be < 20\\\");\\n        require(strBytes.length > 3, \\\"Must be > 3\\\");\\n\\n        // Increment the _countTeams counter and get teamId\\n        _countTeams.increment();\\n        uint256 newTeamId = _countTeams.current();\\n\\n        // Add new team data to the struct\\n        teams[newTeamId] = Team({\\n        teamName: _teamName,\\n        teamDescription: _teamDescription,\\n        numberUsers: 0,\\n        numberPoints: 0,\\n        isJoinable: true\\n        });\\n\\n        numberTeams = newTeamId;\\n        emit TeamAdd(newTeamId, _teamName);\\n    }\\n\\n    /**\\n     * @dev Function to change team.\\n     * Callable only by special admins.\\n     */\\n    function changeTeam(address _userAddress, uint256 _newTeamId)\\n    external\\n    onlySpecial\\n    {\\n        require(hasRegistered[_userAddress], \\\"User doesn't exist\\\");\\n        require(\\n            (_newTeamId <= numberTeams) && (_newTeamId > 0),\\n            \\\"teamId doesn't exist\\\"\\n        );\\n        require(teams[_newTeamId].isJoinable, \\\"Team not joinable\\\");\\n        require(\\n            users[_userAddress].teamId != _newTeamId,\\n            \\\"Already in the team\\\"\\n        );\\n\\n        // Get old teamId\\n        uint256 oldTeamId = users[_userAddress].teamId;\\n\\n        // Change number of users in old team\\n        teams[oldTeamId].numberUsers = teams[oldTeamId].numberUsers.sub(1);\\n\\n        // Change teamId in user mapping\\n        users[_userAddress].teamId = _newTeamId;\\n\\n        // Change number of users in new team\\n        teams[_newTeamId].numberUsers = teams[_newTeamId].numberUsers.add(1);\\n\\n        emit UserChangeTeam(_userAddress, oldTeamId, _newTeamId);\\n    }\\n\\n    /**\\n     * @dev Claim CAKE to burn later.\\n     * Callable only by owner admins.\\n     */\\n    function claimFee(uint256 _amount) external onlyOwner {\\n        cakeToken.safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @dev Make a team joinable again.\\n     * Callable only by owner admins.\\n     */\\n    function makeTeamJoinable(uint256 _teamId) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        teams[_teamId].isJoinable = true;\\n    }\\n\\n    /**\\n     * @dev Make a team not joinable.\\n     * Callable only by owner admins.\\n     */\\n    function makeTeamNotJoinable(uint256 _teamId) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        teams[_teamId].isJoinable = false;\\n    }\\n\\n    /**\\n     * @dev Rename a team\\n     * Callable only by owner admins.\\n     */\\n    function renameTeam(\\n        uint256 _teamId,\\n        string calldata _teamName,\\n        string calldata _teamDescription\\n    ) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n\\n        // Verify length is between 3 and 16\\n        bytes memory strBytes = bytes(_teamName);\\n        require(strBytes.length < 20, \\\"Must be < 20\\\");\\n        require(strBytes.length > 3, \\\"Must be > 3\\\");\\n\\n        teams[_teamId].teamName = _teamName;\\n        teams[_teamId].teamDescription = _teamDescription;\\n    }\\n\\n    /**\\n     * @dev Update the number of CAKE to register\\n     * Callable only by owner admins.\\n     */\\n    function updateNumberCake(\\n        uint256 _newNumberCakeToReactivate,\\n        uint256 _newNumberCakeToRegister,\\n        uint256 _newNumberCakeToUpdate\\n    ) external onlyOwner {\\n        numberCakeToReactivate = _newNumberCakeToReactivate;\\n        numberCakeToRegister = _newNumberCakeToRegister;\\n        numberCakeToUpdate = _newNumberCakeToUpdate;\\n    }\\n\\n    /**\\n     * @dev Check the user's profile for a given address\\n     */\\n    function getUserProfile(address _userAddress)\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256,\\n        bool\\n    )\\n    {\\n        require(hasRegistered[_userAddress], \\\"Not registered\\\");\\n        return (\\n        users[_userAddress].userId,\\n        users[_userAddress].numberPoints,\\n        users[_userAddress].teamId,\\n        users[_userAddress].nftAddress,\\n        users[_userAddress].tokenId,\\n        users[_userAddress].isActive\\n        );\\n    }\\n\\n    /**\\n     * @dev Check the user's status for a given address\\n     */\\n    function getUserStatus(address _userAddress) external view returns (bool) {\\n        return (users[_userAddress].isActive);\\n    }\\n\\n    /**\\n     * @dev Check a team's profile\\n     */\\n    function getTeamProfile(uint256 _teamId)\\n    external\\n    view\\n    returns (\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        bool\\n    )\\n    {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        return (\\n        teams[_teamId].teamName,\\n        teams[_teamId].teamDescription,\\n        teams[_teamId].numberUsers,\\n        teams[_teamId].numberPoints,\\n        teams[_teamId].isJoinable\\n        );\\n    }\\n}\",\"keccak256\":\"0x93b9641f327c30bb192b19b29438528a323bdebb7147b261f2d3763af434d855\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034ce380380620034ce83398101604081905262000034916200012c565b600180546001600160a01b0319166001600160a01b0386161790556003839055600482905560058190556200007260006200006c3390565b6200007c565b5050505062000177565b6200008882826200008c565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000088576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000e83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000806000806080858703121562000142578384fd5b84516001600160a01b038116811462000159578485fd5b60208601516040870151606090970151919890975090945092505050565b61334780620001876000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063a0d035261161013b578063d547741f116100b8578063ea0d5dcd1161007c578063ea0d5dcd14610560578063ebc4ffc71461058f578063f667526a146105a2578063f684f33c146105b5578063fd825f58146105ca5761023d565b8063d547741f1461050b578063da83fe4a1461051e578063da95006d14610531578063e2fa2ff31461053a578063e5020a621461054d5761023d565b8063be4f9bd6116100ff578063be4f9bd6146104ab578063bf051c13146104b4578063c1694a2f146104db578063c9bed948146104e3578063d1d0954c146104f85761023d565b8063a0d0352614610436578063a217fddf14610459578063a40601ee14610461578063a56bd1de14610474578063aee2f47f146104875761023d565b80632daa72d4116101c95780635da3c2401161018d5780635da3c240146103875780635db345661461039a5780638904bf2f146103ad57806391d14854146103d8578063987ee156146103eb5761023d565b80632daa72d41461033c5780632f2ff15d1461034f57806336568abe146103625780633dd452d61461037557806349b2cff51461037e5761023d565b80631bdc17f6116102105780631bdc17f6146102c95780631d0c02b9146102dc5780631e47a476146102f3578063218188d714610306578063248a9ca3146103195761023d565b806301ffc9a7146102425780630a82697b1461026a5780630d4fb8031461027f578063150b7a0214610292575b600080fd5b610255610250366004612d81565b6105dd565b60405190151581526020015b60405180910390f35b61027d610278366004612c22565b610614565b005b61027d61028d366004612da9565b61097e565b6102b06102a0366004612b49565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610261565b61027d6102d7366004612c4d565b610bc0565b6102e560055481565b604051908152602001610261565b61027d610301366004612ee1565b610c74565b61027d610314366004612d3a565b610d0d565b6102e5610327366004612d3a565b60009081526020819052604090206001015490565b61027d61034a366004612ee1565b610d7d565b61027d61035d366004612d52565b610db2565b61027d610370366004612d52565b610dde565b6102e560065481565b6102e560045481565b61027d610395366004612b11565b610e5c565b61027d6103a8366004612e49565b610f55565b6001546103c0906001600160a01b031681565b6040516001600160a01b039091168152602001610261565b6102556103e6366004612d52565b6110a6565b6103fe6103f9366004612b11565b6110cf565b604080519687526020870195909552938501929092526001600160a01b031660608401526080830152151560a082015260c001610261565b610255610444366004612b11565b60076020526000908152604090205460ff1681565b6102e5600081565b61027d61046f366004612c22565b61117d565b61027d610482366004612c81565b611499565b61049a610495366004612d3a565b6115ef565b604051610261959493929190613056565b6102e560025481565b6102e57f3f12a51c1a5d4235e47a0365ddc220be1678ccffcdf71bfd6ee9c417f801e00881565b61027d611778565b6102e56000805160206132f283398151915281565b61027d610506366004612ec0565b61193e565b61027d610519366004612d52565b6119a7565b61027d61052c366004612c22565b6119cd565b6102e560035481565b61027d610548366004612ccb565b611a4a565b61027d61055b366004612c22565b611bcf565b61025561056e366004612b11565b6001600160a01b031660009081526009602052604090206005015460ff1690565b61027d61059d366004612d3a565b611e7b565b61027d6105b0366004612d3a565b611eee565b6102e56000805160206132d283398151915281565b61027d6105d8366004612e12565b611f2c565b60006001600160e01b03198216637965db0b60e01b148061060e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081526007602052604090205460ff1661064c5760405162461bcd60e51b8152600401610643906130c6565b60405180910390fd5b6106646000805160206132d2833981519152836110a6565b6106805760405162461bcd60e51b815260040161064390613146565b3360009081526009602052604090206005015460ff166106d45760405162461bcd60e51b815260206004820152600f60248201526e55736572206e6f742061637469766560881b6044820152606401610643565b3360009081526009602052604090819020600381015460049182015492516331a9108f60e11b81529182018490526001600160a01b0390811692918591821690636352211e9060240160206040518083038186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190612b2d565b6001600160a01b0316336001600160a01b0316146107c95760405162461bcd60e51b81526020600482015260196024820152784f6e6c79204e4654206f776e65722063616e2075706461746560381b6044820152606401610643565b604051632142170760e11b81526001600160a01b038216906342842e0e906107f990339030908990600401612fc9565b600060405180830381600087803b15801561081357600080fd5b505af1158015610827573d6000803e3d6000fd5b5050505061084d6108353390565b6005546001546001600160a01b03169190309061235b565b604051632142170760e11b815283906001600160a01b038216906342842e0e9061087f90309033908890600401612fc9565b600060405180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b5050505085600960006108bd3390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600960006109103390565b6001600160a01b0316815260208101919091526040016000206004015533604080516001600160a01b0389811682526020820189905292909216917fe8e88d4216f3bbc2d1a4dd55aa66fd3e0065ef03970fa056a19d018ca19d5805910160405180910390a2505050505050565b6109896000336103e6565b6109a55760405162461bcd60e51b81526004016106439061311a565b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293505060149091109050610a235760405162461bcd60e51b815260206004820152600c60248201526b04d757374206265203c2032360a41b6044820152606401610643565b6003815111610a625760405162461bcd60e51b815260206004820152600b60248201526a4d757374206265203e203360a81b6044820152606401610643565b610a70600a80546001019055565b6000610a7b600a5490565b6040805160c06020601f8a01819004028201810190925260a081018881529293509182918990899081908501838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250505060208083018290526040808401839052600160609094019390935284825260088152919020825180519192610b309284929091019061297b565b506020828101518051610b49926001850192019061297b565b506040828101516002830155606083015160038301556080909201516004909101805460ff19169115159190911790556006829055517f1137f48534f03e02268dec7839069a7484bc6788c43e4ed9dc38dd8a2f269bc790610bb090839089908990613173565b60405180910390a1505050505050565b610bd86000805160206132f2833981519152336103e6565b610bf45760405162461bcd60e51b81526004016106439061309b565b6001600160a01b038316600090815260096020526040902060010154610c1a90836123b3565b6001600160a01b038416600081815260096020908152604091829020600101939093555184815283927f04bc07bcb78bb21e5665cf01cd24f6a6a06e21fd20d60df8f0fa8d58c66f293491015b60405180910390a3505050565b610c8c6000805160206132f2833981519152336103e6565b610ca85760405162461bcd60e51b81526004016106439061309b565b600083815260086020526040902060030154610cc490836123b3565b6000848152600860209081526040918290206003019290925551838152829185917f2056366a9d1345af9da00985231357931fb77dc7fa7bdf71058e3ca3816f9d389101610c67565b610d186000336103e6565b610d345760405162461bcd60e51b81526004016106439061311a565b6006548111158015610d465750600081115b610d625760405162461bcd60e51b8152600401610643906130f2565b6000908152600860205260409020600401805460ff19169055565b610d886000336103e6565b610da45760405162461bcd60e51b81526004016106439061311a565b600392909255600455600555565b600082815260208190526040902060010154610dcf81335b6123c6565b610dd9838361242a565b505050565b6001600160a01b0381163314610e4e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610643565b610e5882826124ae565b5050565b610e676000336103e6565b610e835760405162461bcd60e51b81526004016106439061311a565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b158015610ec957600080fd5b505afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190612d1a565b610f3a5760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524337323160b01b6044820152606401610643565b610f526000805160206132d283398151915282610db2565b50565b610f606000336103e6565b610f7c5760405162461bcd60e51b81526004016106439061311a565b6006548511158015610f8e5750600085115b610faa5760405162461bcd60e51b8152600401610643906130f2565b600084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050601490911090506110285760405162461bcd60e51b815260206004820152600c60248201526b04d757374206265203c2032360a41b6044820152606401610643565b60038151116110675760405162461bcd60e51b815260206004820152600b60248201526a4d757374206265203e203360a81b6044820152606401610643565b60008681526008602052604090206110809086866129ff565b50600086815260086020526040902061109d9060010184846129ff565b50505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152600760205260408120548190819081908190819060ff166111325760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610643565b505050506001600160a01b039283166000908152600960205260409020805460018201546002830154600384015460048501546005909501549398929791965016935060ff90911690565b3360009081526007602052604090205460ff166111ac5760405162461bcd60e51b8152600401610643906130c6565b6111c46000805160206132d2833981519152836110a6565b6111e05760405162461bcd60e51b815260040161064390613146565b3360009081526009602052604090206005015460ff16156112345760405162461bcd60e51b815260206004820152600e60248201526d557365722069732061637469766560901b6044820152606401610643565b6040516331a9108f60e11b81526004810182905282906001600160a01b03821690636352211e9060240160206040518083038186803b15801561127657600080fd5b505afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae9190612b2d565b6001600160a01b0316336001600160a01b03161461130a5760405162461bcd60e51b81526020600482015260196024820152784f6e6c79204e4654206f776e65722063616e2075706461746560381b6044820152606401610643565b611326336003546001546001600160a01b03169190309061235b565b604051632142170760e11b81526001600160a01b038216906342842e0e9061135690339030908790600401612fc9565b600060405180830381600087803b15801561137057600080fd5b505af1158015611384573d6000803e3d6000fd5b505050506000600960006113953390565b6001600160a01b03166001600160a01b031681526020019081526020016000206002015490506113e5600160086000848152602001908152602001600020600201546123b390919063ffffffff16565b6000828152600860205260409020600290810191909155546114089060016123b3565b6002553360008181526009602090815260409182902060058101805460ff191660011790556003810180546001600160a01b038a166001600160a01b0319909116811790915560049091018790558251858152918201529081018590527fdb76eea80687b6553e5d689ff9d000c0ce2c10574b39d64cacc2b4f6f54f6838906060015b60405180910390a250505050565b6114b16000805160206132f2833981519152336103e6565b6114cd5760405162461bcd60e51b81526004016106439061309b565b6103e982106115165760405162461bcd60e51b81526020600482015260156024820152744c656e677468206d757374206265203c203130303160581b6044820152606401610643565b60005b828110156115e957611581826009600087878681811061154957634e487b7160e01b600052603260045260246000fd5b905060200201602081019061155e9190612b11565b6001600160a01b0316815260208101919091526040016000206001015490612513565b600960008686858181106115a557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906115ba9190612b11565b6001600160a01b03168152602081019190915260400160002060010155806115e181613275565b915050611519565b50505050565b606080600080600060065486111580156116095750600086115b6116255760405162461bcd60e51b8152600401610643906130f2565b600086815260086020526040902060028101546003820154600483015483546001850193929160ff1690859061165a9061323a565b80601f01602080910402602001604051908101604052809291908181526020018280546116869061323a565b80156116d35780601f106116a8576101008083540402835291602001916116d3565b820191906000526020600020905b8154815290600101906020018083116116b657829003601f168201915b505050505094508380546116e69061323a565b80601f01602080910402602001604051908101604052809291908181526020018280546117129061323a565b801561175f5780601f106117345761010080835404028352916020019161175f565b820191906000526020600020905b81548152906001019060200180831161174257829003601f168201915b50989f939e50959c50939a509198509650505050505050565b3360009081526007602052604090205460ff166117a75760405162461bcd60e51b8152600401610643906130c6565b3360009081526009602052604090206005015460ff166117fb5760405162461bcd60e51b815260206004820152600f60248201526e55736572206e6f742061637469766560881b6044820152606401610643565b33600090815260096020908152604080832060058101805460ff191690556002908101548085526008909352922090910154611838906001612513565b60008281526008602052604090206002908101919091555461185b906001612513565b60025533600081815260096020526040808220600381018054600492830180546001600160a01b03198316909355949094559151632142170760e11b81526001600160a01b0390931693919284926342842e0e926118be92309291879101612fc9565b600060405180830381600087803b1580156118d857600080fd5b505af11580156118ec573d6000803e3d6000fd5b505050506118f73390565b6001600160a01b03167fe0ed25582c4d86fd51bfe26383781fc8bbf5636813cbfdf93c440b5828c930408460405161193191815260200190565b60405180910390a2505050565b6119566000805160206132f2833981519152336103e6565b6119725760405162461bcd60e51b81526004016106439061309b565b60008281526008602052604090206003015461198e9082612513565b6000928352600860205260409092206003019190915550565b6000828152602081905260409020600101546119c38133610dca565b610dd983836124ae565b6119e56000805160206132f2833981519152336103e6565b611a015760405162461bcd60e51b81526004016106439061309b565b6001600160a01b038216600090815260096020526040902060010154611a279082612513565b6001600160a01b0390921660009081526009602052604090206001019190915550565b611a626000805160206132f2833981519152336103e6565b611a7e5760405162461bcd60e51b81526004016106439061309b565b6103e98310611ac75760405162461bcd60e51b81526020600482015260156024820152744c656e677468206d757374206265203c203130303160581b6044820152606401610643565b60005b83811015611b9a57611b328360096000888886818110611afa57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611b0f9190612b11565b6001600160a01b03168152602081019190915260400160002060010154906123b3565b60096000878785818110611b5657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611b6b9190612b11565b6001600160a01b0316815260208101919091526040016000206001015580611b9281613275565b915050611aca565b50807f473f8fafa9bb6f152b95565955b672a2c8b798b9c0a7c17f2e43bd4577f972de85858560405161148b93929190612fed565b611bf97f3f12a51c1a5d4235e47a0365ddc220be1678ccffcdf71bfd6ee9c417f801e008336103e6565b611c3b5760405162461bcd60e51b81526020600482015260136024820152722737ba10309039b832b1b4b0b61030b236b4b760691b6044820152606401610643565b6001600160a01b03821660009081526007602052604090205460ff16611c985760405162461bcd60e51b8152602060048201526012602482015271155cd95c88191bd95cdb89dd08195e1a5cdd60721b6044820152606401610643565b6006548111158015611caa5750600081115b611ced5760405162461bcd60e51b81526020600482015260146024820152731d19585b525908191bd95cdb89dd08195e1a5cdd60621b6044820152606401610643565b60008181526008602052604090206004015460ff16611d425760405162461bcd60e51b81526020600482015260116024820152705465616d206e6f74206a6f696e61626c6560781b6044820152606401610643565b6001600160a01b038216600090815260096020526040902060020154811415611da35760405162461bcd60e51b8152602060048201526013602482015272416c726561647920696e20746865207465616d60681b6044820152606401610643565b6001600160a01b03821660009081526009602090815260408083206002908101548085526008909352922090910154611ddd906001612513565b60008281526008602081815260408084206002908101959095556001600160a01b038816845260098252808420850187905586845291905290200154611e249060016123b3565b6000838152600860209081526040918290206002019290925580518381529182018490526001600160a01b038516917f74c08ece62e2369a06a4cac8609fd31e7f3ae99e0dbedbc2bfcf0b9397d9a6919101611931565b611e866000336103e6565b611ea25760405162461bcd60e51b81526004016106439061311a565b6006548111158015611eb45750600081115b611ed05760405162461bcd60e51b8152600401610643906130f2565b6000908152600860205260409020600401805460ff19166001179055565b611ef96000336103e6565b611f155760405162461bcd60e51b81526004016106439061311a565b610f52336001546001600160a01b0316908361251f565b3360009081526007602052604090205460ff1615611f815760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610643565b6006548311158015611f935750600083115b611fd05760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081d19585b525960921b6044820152606401610643565b60008381526008602052604090206004015460ff166120255760405162461bcd60e51b81526020600482015260116024820152705465616d206e6f74206a6f696e61626c6560781b6044820152606401610643565b61203d6000805160206132d2833981519152836110a6565b6120595760405162461bcd60e51b815260040161064390613146565b6040516331a9108f60e11b81526004810182905282906001600160a01b03821690636352211e9060240160206040518083038186803b15801561209b57600080fd5b505afa1580156120af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d39190612b2d565b6001600160a01b0316336001600160a01b0316146121335760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79204e4654206f776e65722063616e20726567697374657200000000006044820152606401610643565b604051632142170760e11b81526001600160a01b038216906342842e0e9061216390339030908790600401612fc9565b600060405180830381600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b505050506121b761219f3390565b6004546001546001600160a01b03169190309061235b565b6121c5600b80546001019055565b60006121d0600b5490565b90506040518060c0016040528082815260200160008152602001868152602001856001600160a01b0316815260200184815260200160011515815250600960006122173390565b6001600160a01b03908116825260208083019390935260409182016000908120855181559385015160018086019190915592850151600285015560608501516003850180546001600160a01b03191691909316179091556080840151600484015560a0909301516005909201805460ff1916921515929092179091559060079061229e3390565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556002546122d49060016123b3565b6002908155600086815260086020526040902001546122f49060016123b3565b60008681526008602052604090206002015533604080518781526001600160a01b0387811660208301529181018690529116907f628915737ae1dae037b128d0892692746d4e63e2f72632781c0a08f7168b1be89060600160405180910390a25050505050565b6115e9846323b872dd60e01b85858560405160240161237c93929190612fc9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261254f565b60006123bf82846131a9565b9392505050565b6123d082826110a6565b610e58576123e8816001600160a01b03166014612621565b6123f3836020612621565b604051602001612404929190612f54565b60408051601f198184030181529082905262461bcd60e51b825261064391600401613043565b61243482826110a6565b610e58576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561246a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6124b882826110a6565b15610e58576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006123bf82846131e0565b6040516001600160a01b038316602482015260448101829052610dd990849063a9059cbb60e01b9060640161237c565b60006125a4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128039092919063ffffffff16565b805190915015610dd957808060200190518101906125c29190612d1a565b610dd95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610643565b606060006126308360026131c1565b61263b9060026131a9565b67ffffffffffffffff81111561266157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561268b576020820181803683370190505b509050600360fc1b816000815181106126b457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126f157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006127158460026131c1565b6127209060016131a9565b90505b60018111156127b4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061276257634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061278657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936127ad81613223565b9050612723565b5083156123bf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610643565b6060612812848460008561281a565b949350505050565b60608247101561287b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610643565b843b6128c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610643565b600080866001600160a01b031685876040516128e59190612f38565b60006040518083038185875af1925050503d8060008114612922576040519150601f19603f3d011682016040523d82523d6000602084013e612927565b606091505b5091509150612937828286612942565b979650505050505050565b606083156129515750816123bf565b8251156129615782518084602001fd5b8160405162461bcd60e51b81526004016106439190613043565b8280546129879061323a565b90600052602060002090601f0160209004810192826129a957600085556129ef565b82601f106129c257805160ff19168380011785556129ef565b828001600101855582156129ef579182015b828111156129ef5782518255916020019190600101906129d4565b506129fb929150612a73565b5090565b828054612a0b9061323a565b90600052602060002090601f016020900481019282612a2d57600085556129ef565b82601f10612a465782800160ff198235161785556129ef565b828001600101855582156129ef579182015b828111156129ef578235825591602001919060010190612a58565b5b808211156129fb5760008155600101612a74565b60008083601f840112612a99578081fd5b50813567ffffffffffffffff811115612ab0578182fd5b6020830191508360208083028501011115612aca57600080fd5b9250929050565b60008083601f840112612ae2578182fd5b50813567ffffffffffffffff811115612af9578182fd5b602083019150836020828501011115612aca57600080fd5b600060208284031215612b22578081fd5b81356123bf816132bc565b600060208284031215612b3e578081fd5b81516123bf816132bc565b60008060008060808587031215612b5e578283fd5b8435612b69816132bc565b93506020850135612b79816132bc565b925060408501359150606085013567ffffffffffffffff80821115612b9c578283fd5b818701915087601f830112612baf578283fd5b813581811115612bc157612bc16132a6565b604051601f8201601f19908116603f01168101908382118183101715612be957612be96132a6565b816040528281528a6020848701011115612c01578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612c34578182fd5b8235612c3f816132bc565b946020939093013593505050565b600080600060608486031215612c61578283fd5b8335612c6c816132bc565b95602085013595506040909401359392505050565b600080600060408486031215612c95578283fd5b833567ffffffffffffffff811115612cab578384fd5b612cb786828701612a88565b909790965060209590950135949350505050565b60008060008060608587031215612ce0578384fd5b843567ffffffffffffffff811115612cf6578485fd5b612d0287828801612a88565b90989097506020870135966040013595509350505050565b600060208284031215612d2b578081fd5b815180151581146123bf578182fd5b600060208284031215612d4b578081fd5b5035919050565b60008060408385031215612d64578182fd5b823591506020830135612d76816132bc565b809150509250929050565b600060208284031215612d92578081fd5b81356001600160e01b0319811681146123bf578182fd5b60008060008060408587031215612dbe578384fd5b843567ffffffffffffffff80821115612dd5578586fd5b612de188838901612ad1565b90965094506020870135915080821115612df9578384fd5b50612e0687828801612ad1565b95989497509550505050565b600080600060608486031215612e26578081fd5b833592506020840135612e38816132bc565b929592945050506040919091013590565b600080600080600060608688031215612e60578283fd5b85359450602086013567ffffffffffffffff80821115612e7e578485fd5b612e8a89838a01612ad1565b90965094506040880135915080821115612ea2578283fd5b50612eaf88828901612ad1565b969995985093965092949392505050565b60008060408385031215612ed2578182fd5b50508035926020909101359150565b600080600060608486031215612ef5578081fd5b505081359360208301359350604090920135919050565b60008151808452612f248160208601602086016131f7565b601f01601f19169290920160200192915050565b60008251612f4a8184602087016131f7565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612f8c8160178501602088016131f7565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fbd8160288401602088016131f7565b01602801949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6040808252810183905260008460608301825b86811015613030578235613013816132bc565b6001600160a01b0316825260209283019290910190600101613000565b5060209390930193909352509392505050565b6000602082526123bf6020830184612f0c565b600060a0825261306960a0830188612f0c565b828103602084015261307b8188612f0c565b604084019690965250506060810192909252151560809091015292915050565b6020808252601190820152702737ba1030903837b4b73a1030b236b4b760791b604082015260600190565b60208082526012908201527112185cc81b9bdd081c9959da5cdd195c995960721b604082015260600190565b6020808252600e908201526d1d19585b5259081a5b9d985b1a5960921b604082015260600190565b6020808252601290820152712737ba103a34329036b0b4b71030b236b4b760711b604082015260600190565b602080825260139082015272139195081859191c995cdcc81a5b9d985b1a59606a1b604082015260600190565b60008482526040602083015282604083015282846060840137818301606090810191909152601f909201601f1916010192915050565b600082198211156131bc576131bc613290565b500190565b60008160001904831182151516156131db576131db613290565b500290565b6000828210156131f2576131f2613290565b500390565b60005b838110156132125781810151838201526020016131fa565b838111156115e95750506000910152565b60008161323257613232613290565b506000190190565b60028104600182168061324e57607f821691505b6020821081141561326f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561328957613289613290565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f5257600080fdfe8736816fdbcc15d6cc3f6dcf60e42b0ef33eb02281d312c807a38b4ad09190c0110b44e4bccdedbab0625f137765abddea8ae658791a82fff3fb5e80db2bad48a2646970667358221220f64188d072d17ca363f89841b9a0ba3da86dbc911a82521c226e64af4cfb053064736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c8063a0d035261161013b578063d547741f116100b8578063ea0d5dcd1161007c578063ea0d5dcd14610560578063ebc4ffc71461058f578063f667526a146105a2578063f684f33c146105b5578063fd825f58146105ca5761023d565b8063d547741f1461050b578063da83fe4a1461051e578063da95006d14610531578063e2fa2ff31461053a578063e5020a621461054d5761023d565b8063be4f9bd6116100ff578063be4f9bd6146104ab578063bf051c13146104b4578063c1694a2f146104db578063c9bed948146104e3578063d1d0954c146104f85761023d565b8063a0d0352614610436578063a217fddf14610459578063a40601ee14610461578063a56bd1de14610474578063aee2f47f146104875761023d565b80632daa72d4116101c95780635da3c2401161018d5780635da3c240146103875780635db345661461039a5780638904bf2f146103ad57806391d14854146103d8578063987ee156146103eb5761023d565b80632daa72d41461033c5780632f2ff15d1461034f57806336568abe146103625780633dd452d61461037557806349b2cff51461037e5761023d565b80631bdc17f6116102105780631bdc17f6146102c95780631d0c02b9146102dc5780631e47a476146102f3578063218188d714610306578063248a9ca3146103195761023d565b806301ffc9a7146102425780630a82697b1461026a5780630d4fb8031461027f578063150b7a0214610292575b600080fd5b610255610250366004612d81565b6105dd565b60405190151581526020015b60405180910390f35b61027d610278366004612c22565b610614565b005b61027d61028d366004612da9565b61097e565b6102b06102a0366004612b49565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610261565b61027d6102d7366004612c4d565b610bc0565b6102e560055481565b604051908152602001610261565b61027d610301366004612ee1565b610c74565b61027d610314366004612d3a565b610d0d565b6102e5610327366004612d3a565b60009081526020819052604090206001015490565b61027d61034a366004612ee1565b610d7d565b61027d61035d366004612d52565b610db2565b61027d610370366004612d52565b610dde565b6102e560065481565b6102e560045481565b61027d610395366004612b11565b610e5c565b61027d6103a8366004612e49565b610f55565b6001546103c0906001600160a01b031681565b6040516001600160a01b039091168152602001610261565b6102556103e6366004612d52565b6110a6565b6103fe6103f9366004612b11565b6110cf565b604080519687526020870195909552938501929092526001600160a01b031660608401526080830152151560a082015260c001610261565b610255610444366004612b11565b60076020526000908152604090205460ff1681565b6102e5600081565b61027d61046f366004612c22565b61117d565b61027d610482366004612c81565b611499565b61049a610495366004612d3a565b6115ef565b604051610261959493929190613056565b6102e560025481565b6102e57f3f12a51c1a5d4235e47a0365ddc220be1678ccffcdf71bfd6ee9c417f801e00881565b61027d611778565b6102e56000805160206132f283398151915281565b61027d610506366004612ec0565b61193e565b61027d610519366004612d52565b6119a7565b61027d61052c366004612c22565b6119cd565b6102e560035481565b61027d610548366004612ccb565b611a4a565b61027d61055b366004612c22565b611bcf565b61025561056e366004612b11565b6001600160a01b031660009081526009602052604090206005015460ff1690565b61027d61059d366004612d3a565b611e7b565b61027d6105b0366004612d3a565b611eee565b6102e56000805160206132d283398151915281565b61027d6105d8366004612e12565b611f2c565b60006001600160e01b03198216637965db0b60e01b148061060e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081526007602052604090205460ff1661064c5760405162461bcd60e51b8152600401610643906130c6565b60405180910390fd5b6106646000805160206132d2833981519152836110a6565b6106805760405162461bcd60e51b815260040161064390613146565b3360009081526009602052604090206005015460ff166106d45760405162461bcd60e51b815260206004820152600f60248201526e55736572206e6f742061637469766560881b6044820152606401610643565b3360009081526009602052604090819020600381015460049182015492516331a9108f60e11b81529182018490526001600160a01b0390811692918591821690636352211e9060240160206040518083038186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190612b2d565b6001600160a01b0316336001600160a01b0316146107c95760405162461bcd60e51b81526020600482015260196024820152784f6e6c79204e4654206f776e65722063616e2075706461746560381b6044820152606401610643565b604051632142170760e11b81526001600160a01b038216906342842e0e906107f990339030908990600401612fc9565b600060405180830381600087803b15801561081357600080fd5b505af1158015610827573d6000803e3d6000fd5b5050505061084d6108353390565b6005546001546001600160a01b03169190309061235b565b604051632142170760e11b815283906001600160a01b038216906342842e0e9061087f90309033908890600401612fc9565b600060405180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b5050505085600960006108bd3390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600960006109103390565b6001600160a01b0316815260208101919091526040016000206004015533604080516001600160a01b0389811682526020820189905292909216917fe8e88d4216f3bbc2d1a4dd55aa66fd3e0065ef03970fa056a19d018ca19d5805910160405180910390a2505050505050565b6109896000336103e6565b6109a55760405162461bcd60e51b81526004016106439061311a565b600084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293505060149091109050610a235760405162461bcd60e51b815260206004820152600c60248201526b04d757374206265203c2032360a41b6044820152606401610643565b6003815111610a625760405162461bcd60e51b815260206004820152600b60248201526a4d757374206265203e203360a81b6044820152606401610643565b610a70600a80546001019055565b6000610a7b600a5490565b6040805160c06020601f8a01819004028201810190925260a081018881529293509182918990899081908501838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250505060208083018290526040808401839052600160609094019390935284825260088152919020825180519192610b309284929091019061297b565b506020828101518051610b49926001850192019061297b565b506040828101516002830155606083015160038301556080909201516004909101805460ff19169115159190911790556006829055517f1137f48534f03e02268dec7839069a7484bc6788c43e4ed9dc38dd8a2f269bc790610bb090839089908990613173565b60405180910390a1505050505050565b610bd86000805160206132f2833981519152336103e6565b610bf45760405162461bcd60e51b81526004016106439061309b565b6001600160a01b038316600090815260096020526040902060010154610c1a90836123b3565b6001600160a01b038416600081815260096020908152604091829020600101939093555184815283927f04bc07bcb78bb21e5665cf01cd24f6a6a06e21fd20d60df8f0fa8d58c66f293491015b60405180910390a3505050565b610c8c6000805160206132f2833981519152336103e6565b610ca85760405162461bcd60e51b81526004016106439061309b565b600083815260086020526040902060030154610cc490836123b3565b6000848152600860209081526040918290206003019290925551838152829185917f2056366a9d1345af9da00985231357931fb77dc7fa7bdf71058e3ca3816f9d389101610c67565b610d186000336103e6565b610d345760405162461bcd60e51b81526004016106439061311a565b6006548111158015610d465750600081115b610d625760405162461bcd60e51b8152600401610643906130f2565b6000908152600860205260409020600401805460ff19169055565b610d886000336103e6565b610da45760405162461bcd60e51b81526004016106439061311a565b600392909255600455600555565b600082815260208190526040902060010154610dcf81335b6123c6565b610dd9838361242a565b505050565b6001600160a01b0381163314610e4e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610643565b610e5882826124ae565b5050565b610e676000336103e6565b610e835760405162461bcd60e51b81526004016106439061311a565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b158015610ec957600080fd5b505afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190612d1a565b610f3a5760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524337323160b01b6044820152606401610643565b610f526000805160206132d283398151915282610db2565b50565b610f606000336103e6565b610f7c5760405162461bcd60e51b81526004016106439061311a565b6006548511158015610f8e5750600085115b610faa5760405162461bcd60e51b8152600401610643906130f2565b600084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050601490911090506110285760405162461bcd60e51b815260206004820152600c60248201526b04d757374206265203c2032360a41b6044820152606401610643565b60038151116110675760405162461bcd60e51b815260206004820152600b60248201526a4d757374206265203e203360a81b6044820152606401610643565b60008681526008602052604090206110809086866129ff565b50600086815260086020526040902061109d9060010184846129ff565b50505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152600760205260408120548190819081908190819060ff166111325760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610643565b505050506001600160a01b039283166000908152600960205260409020805460018201546002830154600384015460048501546005909501549398929791965016935060ff90911690565b3360009081526007602052604090205460ff166111ac5760405162461bcd60e51b8152600401610643906130c6565b6111c46000805160206132d2833981519152836110a6565b6111e05760405162461bcd60e51b815260040161064390613146565b3360009081526009602052604090206005015460ff16156112345760405162461bcd60e51b815260206004820152600e60248201526d557365722069732061637469766560901b6044820152606401610643565b6040516331a9108f60e11b81526004810182905282906001600160a01b03821690636352211e9060240160206040518083038186803b15801561127657600080fd5b505afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae9190612b2d565b6001600160a01b0316336001600160a01b03161461130a5760405162461bcd60e51b81526020600482015260196024820152784f6e6c79204e4654206f776e65722063616e2075706461746560381b6044820152606401610643565b611326336003546001546001600160a01b03169190309061235b565b604051632142170760e11b81526001600160a01b038216906342842e0e9061135690339030908790600401612fc9565b600060405180830381600087803b15801561137057600080fd5b505af1158015611384573d6000803e3d6000fd5b505050506000600960006113953390565b6001600160a01b03166001600160a01b031681526020019081526020016000206002015490506113e5600160086000848152602001908152602001600020600201546123b390919063ffffffff16565b6000828152600860205260409020600290810191909155546114089060016123b3565b6002553360008181526009602090815260409182902060058101805460ff191660011790556003810180546001600160a01b038a166001600160a01b0319909116811790915560049091018790558251858152918201529081018590527fdb76eea80687b6553e5d689ff9d000c0ce2c10574b39d64cacc2b4f6f54f6838906060015b60405180910390a250505050565b6114b16000805160206132f2833981519152336103e6565b6114cd5760405162461bcd60e51b81526004016106439061309b565b6103e982106115165760405162461bcd60e51b81526020600482015260156024820152744c656e677468206d757374206265203c203130303160581b6044820152606401610643565b60005b828110156115e957611581826009600087878681811061154957634e487b7160e01b600052603260045260246000fd5b905060200201602081019061155e9190612b11565b6001600160a01b0316815260208101919091526040016000206001015490612513565b600960008686858181106115a557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906115ba9190612b11565b6001600160a01b03168152602081019190915260400160002060010155806115e181613275565b915050611519565b50505050565b606080600080600060065486111580156116095750600086115b6116255760405162461bcd60e51b8152600401610643906130f2565b600086815260086020526040902060028101546003820154600483015483546001850193929160ff1690859061165a9061323a565b80601f01602080910402602001604051908101604052809291908181526020018280546116869061323a565b80156116d35780601f106116a8576101008083540402835291602001916116d3565b820191906000526020600020905b8154815290600101906020018083116116b657829003601f168201915b505050505094508380546116e69061323a565b80601f01602080910402602001604051908101604052809291908181526020018280546117129061323a565b801561175f5780601f106117345761010080835404028352916020019161175f565b820191906000526020600020905b81548152906001019060200180831161174257829003601f168201915b50989f939e50959c50939a509198509650505050505050565b3360009081526007602052604090205460ff166117a75760405162461bcd60e51b8152600401610643906130c6565b3360009081526009602052604090206005015460ff166117fb5760405162461bcd60e51b815260206004820152600f60248201526e55736572206e6f742061637469766560881b6044820152606401610643565b33600090815260096020908152604080832060058101805460ff191690556002908101548085526008909352922090910154611838906001612513565b60008281526008602052604090206002908101919091555461185b906001612513565b60025533600081815260096020526040808220600381018054600492830180546001600160a01b03198316909355949094559151632142170760e11b81526001600160a01b0390931693919284926342842e0e926118be92309291879101612fc9565b600060405180830381600087803b1580156118d857600080fd5b505af11580156118ec573d6000803e3d6000fd5b505050506118f73390565b6001600160a01b03167fe0ed25582c4d86fd51bfe26383781fc8bbf5636813cbfdf93c440b5828c930408460405161193191815260200190565b60405180910390a2505050565b6119566000805160206132f2833981519152336103e6565b6119725760405162461bcd60e51b81526004016106439061309b565b60008281526008602052604090206003015461198e9082612513565b6000928352600860205260409092206003019190915550565b6000828152602081905260409020600101546119c38133610dca565b610dd983836124ae565b6119e56000805160206132f2833981519152336103e6565b611a015760405162461bcd60e51b81526004016106439061309b565b6001600160a01b038216600090815260096020526040902060010154611a279082612513565b6001600160a01b0390921660009081526009602052604090206001019190915550565b611a626000805160206132f2833981519152336103e6565b611a7e5760405162461bcd60e51b81526004016106439061309b565b6103e98310611ac75760405162461bcd60e51b81526020600482015260156024820152744c656e677468206d757374206265203c203130303160581b6044820152606401610643565b60005b83811015611b9a57611b328360096000888886818110611afa57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611b0f9190612b11565b6001600160a01b03168152602081019190915260400160002060010154906123b3565b60096000878785818110611b5657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611b6b9190612b11565b6001600160a01b0316815260208101919091526040016000206001015580611b9281613275565b915050611aca565b50807f473f8fafa9bb6f152b95565955b672a2c8b798b9c0a7c17f2e43bd4577f972de85858560405161148b93929190612fed565b611bf97f3f12a51c1a5d4235e47a0365ddc220be1678ccffcdf71bfd6ee9c417f801e008336103e6565b611c3b5760405162461bcd60e51b81526020600482015260136024820152722737ba10309039b832b1b4b0b61030b236b4b760691b6044820152606401610643565b6001600160a01b03821660009081526007602052604090205460ff16611c985760405162461bcd60e51b8152602060048201526012602482015271155cd95c88191bd95cdb89dd08195e1a5cdd60721b6044820152606401610643565b6006548111158015611caa5750600081115b611ced5760405162461bcd60e51b81526020600482015260146024820152731d19585b525908191bd95cdb89dd08195e1a5cdd60621b6044820152606401610643565b60008181526008602052604090206004015460ff16611d425760405162461bcd60e51b81526020600482015260116024820152705465616d206e6f74206a6f696e61626c6560781b6044820152606401610643565b6001600160a01b038216600090815260096020526040902060020154811415611da35760405162461bcd60e51b8152602060048201526013602482015272416c726561647920696e20746865207465616d60681b6044820152606401610643565b6001600160a01b03821660009081526009602090815260408083206002908101548085526008909352922090910154611ddd906001612513565b60008281526008602081815260408084206002908101959095556001600160a01b038816845260098252808420850187905586845291905290200154611e249060016123b3565b6000838152600860209081526040918290206002019290925580518381529182018490526001600160a01b038516917f74c08ece62e2369a06a4cac8609fd31e7f3ae99e0dbedbc2bfcf0b9397d9a6919101611931565b611e866000336103e6565b611ea25760405162461bcd60e51b81526004016106439061311a565b6006548111158015611eb45750600081115b611ed05760405162461bcd60e51b8152600401610643906130f2565b6000908152600860205260409020600401805460ff19166001179055565b611ef96000336103e6565b611f155760405162461bcd60e51b81526004016106439061311a565b610f52336001546001600160a01b0316908361251f565b3360009081526007602052604090205460ff1615611f815760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610643565b6006548311158015611f935750600083115b611fd05760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081d19585b525960921b6044820152606401610643565b60008381526008602052604090206004015460ff166120255760405162461bcd60e51b81526020600482015260116024820152705465616d206e6f74206a6f696e61626c6560781b6044820152606401610643565b61203d6000805160206132d2833981519152836110a6565b6120595760405162461bcd60e51b815260040161064390613146565b6040516331a9108f60e11b81526004810182905282906001600160a01b03821690636352211e9060240160206040518083038186803b15801561209b57600080fd5b505afa1580156120af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d39190612b2d565b6001600160a01b0316336001600160a01b0316146121335760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79204e4654206f776e65722063616e20726567697374657200000000006044820152606401610643565b604051632142170760e11b81526001600160a01b038216906342842e0e9061216390339030908790600401612fc9565b600060405180830381600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b505050506121b761219f3390565b6004546001546001600160a01b03169190309061235b565b6121c5600b80546001019055565b60006121d0600b5490565b90506040518060c0016040528082815260200160008152602001868152602001856001600160a01b0316815260200184815260200160011515815250600960006122173390565b6001600160a01b03908116825260208083019390935260409182016000908120855181559385015160018086019190915592850151600285015560608501516003850180546001600160a01b03191691909316179091556080840151600484015560a0909301516005909201805460ff1916921515929092179091559060079061229e3390565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556002546122d49060016123b3565b6002908155600086815260086020526040902001546122f49060016123b3565b60008681526008602052604090206002015533604080518781526001600160a01b0387811660208301529181018690529116907f628915737ae1dae037b128d0892692746d4e63e2f72632781c0a08f7168b1be89060600160405180910390a25050505050565b6115e9846323b872dd60e01b85858560405160240161237c93929190612fc9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261254f565b60006123bf82846131a9565b9392505050565b6123d082826110a6565b610e58576123e8816001600160a01b03166014612621565b6123f3836020612621565b604051602001612404929190612f54565b60408051601f198184030181529082905262461bcd60e51b825261064391600401613043565b61243482826110a6565b610e58576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561246a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6124b882826110a6565b15610e58576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006123bf82846131e0565b6040516001600160a01b038316602482015260448101829052610dd990849063a9059cbb60e01b9060640161237c565b60006125a4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128039092919063ffffffff16565b805190915015610dd957808060200190518101906125c29190612d1a565b610dd95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610643565b606060006126308360026131c1565b61263b9060026131a9565b67ffffffffffffffff81111561266157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561268b576020820181803683370190505b509050600360fc1b816000815181106126b457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126f157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006127158460026131c1565b6127209060016131a9565b90505b60018111156127b4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061276257634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061278657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936127ad81613223565b9050612723565b5083156123bf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610643565b6060612812848460008561281a565b949350505050565b60608247101561287b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610643565b843b6128c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610643565b600080866001600160a01b031685876040516128e59190612f38565b60006040518083038185875af1925050503d8060008114612922576040519150601f19603f3d011682016040523d82523d6000602084013e612927565b606091505b5091509150612937828286612942565b979650505050505050565b606083156129515750816123bf565b8251156129615782518084602001fd5b8160405162461bcd60e51b81526004016106439190613043565b8280546129879061323a565b90600052602060002090601f0160209004810192826129a957600085556129ef565b82601f106129c257805160ff19168380011785556129ef565b828001600101855582156129ef579182015b828111156129ef5782518255916020019190600101906129d4565b506129fb929150612a73565b5090565b828054612a0b9061323a565b90600052602060002090601f016020900481019282612a2d57600085556129ef565b82601f10612a465782800160ff198235161785556129ef565b828001600101855582156129ef579182015b828111156129ef578235825591602001919060010190612a58565b5b808211156129fb5760008155600101612a74565b60008083601f840112612a99578081fd5b50813567ffffffffffffffff811115612ab0578182fd5b6020830191508360208083028501011115612aca57600080fd5b9250929050565b60008083601f840112612ae2578182fd5b50813567ffffffffffffffff811115612af9578182fd5b602083019150836020828501011115612aca57600080fd5b600060208284031215612b22578081fd5b81356123bf816132bc565b600060208284031215612b3e578081fd5b81516123bf816132bc565b60008060008060808587031215612b5e578283fd5b8435612b69816132bc565b93506020850135612b79816132bc565b925060408501359150606085013567ffffffffffffffff80821115612b9c578283fd5b818701915087601f830112612baf578283fd5b813581811115612bc157612bc16132a6565b604051601f8201601f19908116603f01168101908382118183101715612be957612be96132a6565b816040528281528a6020848701011115612c01578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612c34578182fd5b8235612c3f816132bc565b946020939093013593505050565b600080600060608486031215612c61578283fd5b8335612c6c816132bc565b95602085013595506040909401359392505050565b600080600060408486031215612c95578283fd5b833567ffffffffffffffff811115612cab578384fd5b612cb786828701612a88565b909790965060209590950135949350505050565b60008060008060608587031215612ce0578384fd5b843567ffffffffffffffff811115612cf6578485fd5b612d0287828801612a88565b90989097506020870135966040013595509350505050565b600060208284031215612d2b578081fd5b815180151581146123bf578182fd5b600060208284031215612d4b578081fd5b5035919050565b60008060408385031215612d64578182fd5b823591506020830135612d76816132bc565b809150509250929050565b600060208284031215612d92578081fd5b81356001600160e01b0319811681146123bf578182fd5b60008060008060408587031215612dbe578384fd5b843567ffffffffffffffff80821115612dd5578586fd5b612de188838901612ad1565b90965094506020870135915080821115612df9578384fd5b50612e0687828801612ad1565b95989497509550505050565b600080600060608486031215612e26578081fd5b833592506020840135612e38816132bc565b929592945050506040919091013590565b600080600080600060608688031215612e60578283fd5b85359450602086013567ffffffffffffffff80821115612e7e578485fd5b612e8a89838a01612ad1565b90965094506040880135915080821115612ea2578283fd5b50612eaf88828901612ad1565b969995985093965092949392505050565b60008060408385031215612ed2578182fd5b50508035926020909101359150565b600080600060608486031215612ef5578081fd5b505081359360208301359350604090920135919050565b60008151808452612f248160208601602086016131f7565b601f01601f19169290920160200192915050565b60008251612f4a8184602087016131f7565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612f8c8160178501602088016131f7565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612fbd8160288401602088016131f7565b01602801949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6040808252810183905260008460608301825b86811015613030578235613013816132bc565b6001600160a01b0316825260209283019290910190600101613000565b5060209390930193909352509392505050565b6000602082526123bf6020830184612f0c565b600060a0825261306960a0830188612f0c565b828103602084015261307b8188612f0c565b604084019690965250506060810192909252151560809091015292915050565b6020808252601190820152702737ba1030903837b4b73a1030b236b4b760791b604082015260600190565b60208082526012908201527112185cc81b9bdd081c9959da5cdd195c995960721b604082015260600190565b6020808252600e908201526d1d19585b5259081a5b9d985b1a5960921b604082015260600190565b6020808252601290820152712737ba103a34329036b0b4b71030b236b4b760711b604082015260600190565b602080825260139082015272139195081859191c995cdcc81a5b9d985b1a59606a1b604082015260600190565b60008482526040602083015282604083015282846060840137818301606090810191909152601f909201601f1916010192915050565b600082198211156131bc576131bc613290565b500190565b60008160001904831182151516156131db576131db613290565b500290565b6000828210156131f2576131f2613290565b500390565b60005b838110156132125781810151838201526020016131fa565b838111156115e95750506000910152565b60008161323257613232613290565b506000190190565b60028104600182168061324e57607f821691505b6020821081141561326f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561328957613289613290565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f5257600080fdfe8736816fdbcc15d6cc3f6dcf60e42b0ef33eb02281d312c807a38b4ad09190c0110b44e4bccdedbab0625f137765abddea8ae658791a82fff3fb5e80db2bad48a2646970667358221220f64188d072d17ca363f89841b9a0ba3da86dbc911a82521c226e64af4cfb053064736f6c63430008020033",
  "devdoc": {
    "details": "It is a contract for users to bind their address to a customizable profile by depositing a NFT.",
    "kind": "dev",
    "methods": {
      "addNftAddress(address)": {
        "details": "To add a NFT contract address for users to set their profile. Callable only by owner admins."
      },
      "addTeam(string,string)": {
        "details": "Add a new teamId Callable only by owner admins."
      },
      "changeTeam(address,uint256)": {
        "details": "Function to change team. Callable only by special admins."
      },
      "claimFee(uint256)": {
        "details": "Claim CAKE to burn later. Callable only by owner admins."
      },
      "createProfile(uint256,address,uint256)": {
        "details": "To create a user profile. It sends the NFT to the contract and sends CAKE to burn address. Requires 2 token approvals."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTeamProfile(uint256)": {
        "details": "Check a team's profile"
      },
      "getUserProfile(address)": {
        "details": "Check the user's profile for a given address"
      },
      "getUserStatus(address)": {
        "details": "Check the user's status for a given address"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseTeamPoints(uint256,uint256,uint256)": {
        "details": "To increase the number of points for a team. Callable only by point admins"
      },
      "increaseUserPoints(address,uint256,uint256)": {
        "details": "To increase the number of points for a user. Callable only by point admins"
      },
      "increaseUserPointsMultiple(address[],uint256,uint256)": {
        "details": "To increase the number of points for a set of users. Callable only by point admins"
      },
      "makeTeamJoinable(uint256)": {
        "details": "Make a team joinable again. Callable only by owner admins."
      },
      "makeTeamNotJoinable(uint256)": {
        "details": "Make a team not joinable. Callable only by owner admins."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "pauseProfile()": {
        "details": "To pause user profile. It releases the NFT. Callable only by registered users."
      },
      "reactivateProfile(address,uint256)": {
        "details": "To reactivate user profile. Callable only by registered users."
      },
      "removeTeamPoints(uint256,uint256)": {
        "details": "To remove the number of points for a team. Callable only by point admins"
      },
      "removeUserPoints(address,uint256)": {
        "details": "To remove the number of points for a user. Callable only by point admins"
      },
      "removeUserPointsMultiple(address[],uint256)": {
        "details": "To remove a set number of points for a set of users."
      },
      "renameTeam(uint256,string,string)": {
        "details": "Rename a team Callable only by owner admins."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateNumberCake(uint256,uint256,uint256)": {
        "details": "Update the number of CAKE to register Callable only by owner admins."
      },
      "updateProfile(address,uint256)": {
        "details": "To update user profile. Callable only by registered users."
      }
    },
    "title": "ReactProfile.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 7437,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "cakeToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1242"
      },
      {
        "astId": 7454,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "numberActiveProfiles",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7456,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "numberCakeToReactivate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7458,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "numberCakeToRegister",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7460,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "numberCakeToUpdate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7462,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "numberTeams",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7466,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "hasRegistered",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7471,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "teams",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Team)7605_storage)"
      },
      {
        "astId": 7476,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "users",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(User)7618_storage)"
      },
      {
        "astId": 7479,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "_countTeams",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)2828_storage"
      },
      {
        "astId": 7482,
        "contract": "contracts/ReactProfile.sol:ReactProfile",
        "label": "_countUsers",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2828_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1242": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)7618_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReactProfile.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)7618_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(Team)7605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReactProfile.Team)",
        "numberOfBytes": "32",
        "value": "t_struct(Team)7605_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2828_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2827,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Team)7605_storage": {
        "encoding": "inplace",
        "label": "struct ReactProfile.Team",
        "members": [
          {
            "astId": 7596,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "teamName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7598,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "teamDescription",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7600,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "numberUsers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7602,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "numberPoints",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7604,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "isJoinable",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(User)7618_storage": {
        "encoding": "inplace",
        "label": "struct ReactProfile.User",
        "members": [
          {
            "astId": 7607,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "userId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7609,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "numberPoints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7611,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "teamId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7613,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "nftAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7615,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "tokenId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7617,
            "contract": "contracts/ReactProfile.sol:ReactProfile",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}