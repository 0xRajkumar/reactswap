{
  "address": "0xff6dca94678a420190aAee00485c5F2d1B6bae7e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x75ef675eaac672094bad5f29ea73e9e5952095e49e8caee9df49bf4da93c7c3b",
  "receipt": {
    "to": null,
    "from": "0x88888887C3ebD4a33E34a15Db4254C74C75E5D4A",
    "contractAddress": "0xff6dca94678a420190aAee00485c5F2d1B6bae7e",
    "transactionIndex": 0,
    "gasUsed": "2532131",
    "logsBloom": "0x
    "blockHash": "0x1470c527a0116fe1884f679cd85595e080c611f41af76e847e2fe93c348e4e5c",
    "transactionHash": "0x75ef675eaac672094bad5f29ea73e9e5952095e49e8caee9df49bf4da93c7c3b",
    "logs": [],
    "blockNumber": 11849329,
    "cumulativeGasUsed": "2532131",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x88888887C3ebD4a33E34a15Db4254C74C75E5D4A"
  ],
  "solcInputHash": "d02081c84e8df7996569a58cbe28e379",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/amm-v1/ReactSwapFactory.sol\":\"ReactSwapFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/amm-v1/Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./RLP.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\\ncontract Pair is RLP {\\n    using SafeMathUniswap for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"Pair: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"Pair: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, \\\"Pair: FORBIDDEN\\\"); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(\\n            balance0 <= type(uint112).max && balance1 <= type(uint112).max,\\n            \\\"Pair: OVERFLOW\\\"\\n        );\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\n                timeElapsed;\\n            price1CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\n                timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\\n        private\\n        returns (bool feeOn)\\n    {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20Uniswap(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20Uniswap(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = IUniswapV2Factory(factory).migrator();\\n            if (msg.sender == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(\\n                    liquidity > 0 && liquidity != type(uint256).max,\\n                    \\\"Bad desired liquidity\\\"\\n                );\\n            } else {\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(\\n                    MINIMUM_LIQUIDITY\\n                );\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(\\n                amount0.mul(_totalSupply) / _reserve0,\\n                amount1.mul(_totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"Pair: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to)\\n        external\\n        lock\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(\\n            amount0 > 0 && amount1 > 0,\\n            \\\"Pair: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n        );\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(\\n            amount0Out > 0 || amount1Out > 0,\\n            \\\"Pair: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"Pair: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"Pair: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0)\\n                IUniswapV2Callee(to).uniswapV2Call(\\n                    msg.sender,\\n                    amount0Out,\\n                    amount1Out,\\n                    data\\n                );\\n            balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n            balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In =\\n            balance0 > _reserve0 - amount0Out\\n                ? balance0 - (_reserve0 - amount0Out)\\n                : 0;\\n        uint256 amount1In =\\n            balance1 > _reserve1 - amount1Out\\n                ? balance1 - (_reserve1 - amount1Out)\\n                : 0;\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"Pair: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(\\n                balance0Adjusted.mul(balance1Adjusted) >=\\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\\n                \\\"Pair: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(\\n            _token0,\\n            to,\\n            IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0)\\n        );\\n        _safeTransfer(\\n            _token1,\\n            to,\\n            IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1)\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20Uniswap(token0).balanceOf(address(this)),\\n            IERC20Uniswap(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb69852276ab849c29aa087ee4e0f792f16f959109a630d5f2e0011012d8fd918\",\"license\":\"GPL-3.0\"},\"contracts/amm-v1/RLP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract RLP {\\n    using SafeMathUniswap for uint256;\\n\\n    string public constant name = \\\"ReactSwap Liquidity Provider\\\";\\n    string public constant symbol = \\\"RLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\\n                value\\n            );\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"RLP: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x7fd2b4ff30b5a254065abedbcfb0759453f6c171f3214b27d4f50cefb3cb9f96\",\"license\":\"GPL-3.0\"},\"contracts/amm-v1/ReactSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./Pair.sol\\\";\\n\\ncontract ReactSwapFactory is IUniswapV2Factory {\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    address public override migrator;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    constructor(address _feeToSetter) {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view override returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function pairCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(Pair).creationCode);\\n    }\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        override\\n        returns (address pair)\\n    {\\n        require(tokenA != tokenB, \\\"ReactSwap: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) =\\n            tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"ReactSwap: ZERO_ADDRESS\\\");\\n        require(\\n            getPair[token0][token1] == address(0),\\n            \\\"ReactSwap: PAIR_EXISTS\\\"\\n        ); // single check is sufficient\\n        bytes memory bytecode = type(Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, \\\"ReactSwap: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setMigrator(address _migrator) external override {\\n        require(msg.sender == feeToSetter, \\\"ReactSwap: FORBIDDEN\\\");\\n        migrator = _migrator;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, \\\"ReactSwap: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0xa5756e943cacb867ad27fe9720291cc64110867acabf3f8147544b68b866dd00\",\"license\":\"GPL-3.0\"},\"contracts/amm-v1/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface IERC20Uniswap {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd06ed9ddac15419285fe1fb8a52913da16949b8cc9520c825f45599c11ac720e\",\"license\":\"GPL-3.0\"},\"contracts/amm-v1/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb7891d4adfa6b902145241bcbb13886921617a2191b381ee614d0c032190ed47\",\"license\":\"GPL-3.0\"},\"contracts/amm-v1/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xc307a5f23b90e87ca7423374f903a8ae652bb1b566a3a53ce15c3ccd79c89afe\",\"license\":\"GPL-3.0\"},\"contracts/amm-v1/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xefa1bc7cdd2d9d691922a6788597fa5a064ee52ad283442cf1c1d88b897b4c88\",\"license\":\"GPL-3.0\"},\"contracts/amm-v1/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xebf3721adcc1f19f6a9c9d123c0b7a73b9328fbd42f6d814a9a5a6661bc30d63\",\"license\":\"GPL-3.0\"},\"contracts/amm-v1/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.2;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4e150220e7c350b7663f26685988ebcf93f3e72049d57b1e3a99755d7ed60521\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612cf7380380612cf783398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b612c66806100916000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637cd07e47116100715780637cd07e471461012b5780639aab92481461013e578063a2e74af614610146578063c9c6539614610159578063e6a439051461016c578063f46901ed146101a0576100a9565b8063017e7e58146100ae578063094b7415146100de5780631e3dd18b146100f157806323cf311814610104578063574f2ba314610119575b600080fd5b6000546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100c1906001600160a01b031681565b6100c16100ff366004610677565b6101b3565b610117610112366004610624565b6101dd565b005b6004545b6040519081526020016100d5565b6002546100c1906001600160a01b031681565b61011d610232565b610117610154366004610624565b610264565b6100c1610167366004610645565b6102b0565b6100c161017a366004610645565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6101176101ae366004610624565b6105af565b600481815481106101c357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146102105760405162461bcd60e51b81526004016102079061068f565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600060405180602001610244906105fb565b6020820181038252601f19601f8201166040525080519060200120905090565b6001546001600160a01b0316331461028e5760405162461bcd60e51b81526004016102079061068f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156103145760405162461bcd60e51b815260206004820152601e60248201527f5265616374537761703a204944454e544943414c5f41444452455353455300006044820152606401610207565b600080836001600160a01b0316856001600160a01b03161061033757838561033a565b84845b90925090506001600160a01b0382166103955760405162461bcd60e51b815260206004820152601760248201527f5265616374537761703a205a45524f5f414444524553530000000000000000006044820152606401610207565b6001600160a01b038281166000908152600360209081526040808320858516845290915290205416156104035760405162461bcd60e51b81526020600482015260166024820152755265616374537761703a20504149525f45584953545360501b6044820152606401610207565b600060405180602001610415906105fb565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b1580156104c757600080fd5b505af11580156104db573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6001546001600160a01b031633146105d95760405162461bcd60e51b81526004016102079061068f565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612573806106be83390190565b80356001600160a01b038116811461061f57600080fd5b919050565b600060208284031215610635578081fd5b61063e82610608565b9392505050565b60008060408385031215610657578081fd5b61066083610608565b915061066e60208401610608565b90509250929050565b600060208284031215610688578081fd5b5035919050565b6020808252601490820152732932b0b1ba29bbb0b81d102327a92124a22222a760611b60408201526060019056fe60806040526001600c5534801561001557600080fd5b50604080518082018252601c81527f526561637453776170204c69717569646974792050726f7669646572000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f7ffc2b5e62d923da2a545560ba2c767bf9156d7c18b578446807165e0c8c94f3818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556124588061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610418578063d505accf1461042b578063dd62ed3e1461043e578063fff6cae914610469576101a9565b8063ba9a7a56146103e9578063bc25cf77146103f2578063c45a015514610405576101a9565b80637ecebe00116100d35780637ecebe001461036c57806389afcb441461038c57806395d89b41146103b4578063a9059cbb146103d6576101a9565b80636a6278421461033057806370a08231146103435780637464fc3d14610363576101a9565b806323b872dd116101665780633644e515116101405780633644e51514610302578063485cc9551461030b5780635909c0d51461031e5780635a3d549314610327576101a9565b806323b872dd146102ae57806330adf81f146102c1578063313ce567146102e8576101a9565b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610215578063095ea7b3146102495780630dfe16811461026c57806318160ddd14610297575b600080fd5b6101c16101bc366004612151565b610471565b005b6101ff6040518060400160405280601c81526020017f526561637453776170204c69717569646974792050726f76696465720000000081525081565b60405161020c919061224a565b60405180910390f35b61021d610967565b604080516001600160701b03948516815293909216602084015263ffffffff169082015260600161020c565b61025c6102573660046120ee565b610991565b604051901515815260200161020c565b60065461027f906001600160a01b031681565b6040516001600160a01b03909116815260200161020c565b6102a060005481565b60405190815260200161020c565b61025c6102bc366004612039565b6109a8565b6102a07f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102f0601281565b60405160ff909116815260200161020c565b6102a060035481565b6101c1610319366004612001565b610a3c565b6102a060095481565b6102a0600a5481565b6102a061033e366004611fc9565b610ab6565b6102a0610351366004611fc9565b60016020526000908152604090205481565b6102a0600b5481565b6102a061037a366004611fc9565b60046020526000908152604090205481565b61039f61039a366004611fc9565b610f43565b6040805192835260208301919091520161020c565b6101ff604051806040016040528060038152602001620524c560ec1b81525081565b61025c6103e43660046120ee565b6112e0565b6102a06103e881565b6101c1610400366004611fc9565b6112ed565b60055461027f906001600160a01b031681565b60075461027f906001600160a01b031681565b6101c1610439366004612079565b611410565b6102a061044c366004612001565b600260209081526000928352604080842090915290825290205481565b6101c1611617565b600c5460011461049c5760405162461bcd60e51b81526004016104939061227d565b60405180910390fd5b6000600c55841515806104af5750600084115b6104fb5760405162461bcd60e51b815260206004820181905260248201527f506169723a20494e53554646494349454e545f4f55545055545f414d4f554e546044820152606401610493565b600080610506610967565b5091509150816001600160701b03168710801561052b5750806001600160701b031686105b6105775760405162461bcd60e51b815260206004820152601c60248201527f506169723a20494e53554646494349454e545f4c4951554944495459000000006044820152606401610493565b60065460075460009182916001600160a01b039182169190811690891682148015906105b55750806001600160a01b0316896001600160a01b031614155b6105f45760405162461bcd60e51b815260206004820152601060248201526f506169723a20494e56414c49445f544f60801b6044820152606401610493565b8a1561060557610605828a8d611759565b891561061657610616818a8c611759565b8615610683576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906106509033908f908f908e908e906004016121fe565b600060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156106c257600080fd5b505afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa9190612139565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a082319060240160206040518083038186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190612139565b92505050600089856001600160701b031661078f9190612343565b831161079c5760006107b9565b6107af8a6001600160701b038716612343565b6107b99084612343565b905060006107d08a6001600160701b038716612343565b83116107dd5760006107fa565b6107f08a6001600160701b038716612343565b6107fa9084612343565b9050600082118061080b5750600081115b6108575760405162461bcd60e51b815260206004820152601f60248201527f506169723a20494e53554646494349454e545f494e5055545f414d4f554e54006044820152606401610493565b600061087961086784600361189c565b610873876103e861189c565b90611903565b9050600061088b61086784600361189c565b90506108b0620f42406108aa6001600160701b038b8116908b1661189c565b9061189c565b6108ba838361189c565b10156108f25760405162461bcd60e51b8152602060048201526007602482015266506169723a204b60c81b6044820152606401610493565b505061090084848888611959565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600061099e338484611b51565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610a27576001600160a01b0384166000908152600260209081526040808320338452909152902054610a029083611903565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610a32848484611bb3565b5060019392505050565b6005546001600160a01b03163314610a885760405162461bcd60e51b815260206004820152600f60248201526e2830b4b91d102327a92124a22222a760891b6044820152606401610493565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610ada5760405162461bcd60e51b81526004016104939061227d565b6000600c81905580610aea610967565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610b3757600080fd5b505afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f9190612139565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190612139565b90506000610c07836001600160701b038716611903565b90506000610c1e836001600160701b038716611903565b90506000610c2c8787611c59565b60005490915080610e125760055460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b158015610c7c57600080fd5b505afa158015610c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb49190611fe5565b9050336001600160a01b0382161415610d9557806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0057600080fd5b505afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d389190612139565b995060008a118015610d4c57506000198a14155b610d905760405162461bcd60e51b81526020600482015260156024820152744261642064657369726564206c697175696469747960581b6044820152606401610493565b610e0c565b6001600160a01b03811615610de55760405162461bcd60e51b815260206004820152601660248201527526bab9ba103737ba103430bb329036b4b3b930ba37b960511b6044820152606401610493565b610dfd6103e8610873610df8888861189c565b611da5565b9950610e0c60006103e8611e15565b50610e59565b610e566001600160701b038916610e29868461189c565b610e3391906122e1565b6001600160701b038916610e47868561189c565b610e5191906122e1565b611ea4565b98505b60008911610eb55760405162461bcd60e51b815260206004820152602360248201527f506169723a20494e53554646494349454e545f4c49515549444954595f4d494e60448201526215115160ea1b6064820152608401610493565b610ebf8a8a611e15565b610ecb86868a8a611959565b8115610ef557600854610ef1906001600160701b0380821691600160701b90041661189c565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610f685760405162461bcd60e51b81526004016104939061227d565b6000600c81905580610f78610967565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a082319060240160206040518083038186803b158015610fcd57600080fd5b505afa158015610fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110059190612139565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561104a57600080fd5b505afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110829190612139565b3060009081526001602052604081205491925061109f8888611c59565b600054909150806110b0848761189c565b6110ba91906122e1565b9a50806110c7848661189c565b6110d191906122e1565b995060008b1180156110e3575060008a115b61113b5760405162461bcd60e51b815260206004820152602360248201527f506169723a20494e53554646494349454e545f4c49515549444954595f42555260448201526213915160ea1b6064820152608401610493565b6111453084611ebc565b611150878d8d611759565b61115b868d8c611759565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a082319060240160206040518083038186803b15801561119a57600080fd5b505afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190612139565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a082319060240160206040518083038186803b15801561121457600080fd5b505afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612139565b935061125a85858b8b611959565b811561128457600854611280906001600160701b0380821691600160701b90041661189c565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b600061099e338484611bb3565b600c5460011461130f5760405162461bcd60e51b81526004016104939061227d565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916113b991849186916113b4916001600160701b039091169084906370a08231906024015b60206040518083038186803b15801561137c57600080fd5b505afa158015611390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108739190612139565b611759565b6008546040516370a0823160e01b815230600482015261140691839186916113b491600160701b9091046001600160701b0316906001600160a01b038516906370a0823190602401611364565b50506001600c5550565b4284101561144f5760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b6044820152606401610493565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876114a2836123af565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161151b92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611586573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906115bc5750886001600160a01b0316816001600160a01b0316145b6116015760405162461bcd60e51b8152602060048201526016602482015275524c503a20494e56414c49445f5349474e415455524560501b6044820152606401610493565b61160c898989611b51565b505050505050505050565b600c546001146116395760405162461bcd60e51b81526004016104939061227d565b6000600c556006546040516370a0823160e01b8152306004820152611752916001600160a01b0316906370a082319060240160206040518083038186803b15801561168357600080fd5b505afa158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190612139565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156116fe57600080fd5b505afa158015611712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117369190612139565b6008546001600160701b0380821691600160701b900416611959565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916117e591906121e2565b6000604051808303816000865af19150503d8060008114611822576040519150601f19603f3d011682016040523d82523d6000602084013e611827565b606091505b50915091508180156118515750805115806118515750808060200190518101906118519190612119565b6118955760405162461bcd60e51b815260206004820152601560248201527414185a5c8e881514905394d1915497d19052531151605a1b6044820152606401610493565b5050505050565b60008115806118c0575082826118b28183612324565b92506118be90836122e1565b145b6109a25760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610493565b6000826119108382612343565b91508111156109a25760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610493565b6001600160701b03841180159061197757506001600160701b038311155b6119b45760405162461bcd60e51b815260206004820152600e60248201526d506169723a204f564552464c4f5760901b6044820152606401610493565b60006119c5640100000000426123ca565b6008549091506000906119e590600160e01b900463ffffffff168361235a565b905060008163ffffffff16118015611a0557506001600160701b03841615155b8015611a1957506001600160701b03831615155b15611aa8578063ffffffff16611a4185611a3286611f46565b6001600160e01b031690611f5f565b6001600160e01b0316611a549190612324565b60096000828254611a6591906122a3565b909155505063ffffffff8116611a7e84611a3287611f46565b6001600160e01b0316611a919190612324565b600a6000828254611aa291906122a3565b90915550505b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff87160217928390556040805184841681529190930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054611bd69082611903565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611c059082611f74565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611ba69085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611caa57600080fd5b505afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190611fe5565b600b546001600160a01b038216158015945091925090611d91578015611d8c576000611d1d610df86001600160701b0388811690881661189c565b90506000611d2a83611da5565b905080821115611d89576000611d4c611d438484611903565b6000549061189c565b90506000611d6583611d5f86600561189c565b90611f74565b90506000611d7382846122e1565b90508015611d8557611d858782611e15565b5050505b50505b611d9d565b8015611d9d576000600b555b505092915050565b60006003821115611e065750806000611dbf6002836122e1565b611dca9060016122a3565b90505b81811015611e0057905080600281611de581866122e1565b611def91906122a3565b611df991906122e1565b9050611dcd565b50611e10565b8115611e10575060015b919050565b600054611e229082611f74565b60009081556001600160a01b038316815260016020526040902054611e479082611f74565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e989085815260200190565b60405180910390a35050565b6000818310611eb35781611eb5565b825b9392505050565b6001600160a01b038216600090815260016020526040902054611edf9082611903565b6001600160a01b03831660009081526001602052604081209190915554611f069082611903565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611e98565b60006109a2600160701b6001600160701b0384166122f5565b6000611eb56001600160701b038316846122bb565b600082611f8183826122a3565b91508110156109a25760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610493565b600060208284031215611fda578081fd5b8135611eb58161240a565b600060208284031215611ff6578081fd5b8151611eb58161240a565b60008060408385031215612013578081fd5b823561201e8161240a565b9150602083013561202e8161240a565b809150509250929050565b60008060006060848603121561204d578081fd5b83356120588161240a565b925060208401356120688161240a565b929592945050506040919091013590565b600080600080600080600060e0888a031215612093578283fd5b873561209e8161240a565b965060208801356120ae8161240a565b95506040880135945060608801359350608088013560ff811681146120d1578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612100578182fd5b823561210b8161240a565b946020939093013593505050565b60006020828403121561212a578081fd5b81518015158114611eb5578182fd5b60006020828403121561214a578081fd5b5051919050565b600080600080600060808688031215612168578081fd5b853594506020860135935060408601356121818161240a565b9250606086013567ffffffffffffffff8082111561219d578283fd5b818801915088601f8301126121b0578283fd5b8135818111156121be578384fd5b8960208285010111156121cf578384fd5b9699959850939650602001949392505050565b600082516121f481846020870161237f565b9190910192915050565b600060018060a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b600060208252825180602084015261226981604085016020870161237f565b601f01601f19169190910160400192915050565b6020808252600c908201526b14185a5c8e881313d0d2d15160a21b604082015260600190565b600082198211156122b6576122b66123de565b500190565b60006001600160e01b03838116806122d5576122d56123f4565b92169190910492915050565b6000826122f0576122f06123f4565b500490565b60006001600160e01b038281168482168115158284048211161561231b5761231b6123de565b02949350505050565b600081600019048311821515161561233e5761233e6123de565b500290565b600082821015612355576123556123de565b500390565b600063ffffffff83811690831681811015612377576123776123de565b039392505050565b60005b8381101561239a578181015183820152602001612382565b838111156123a9576000848401525b50505050565b60006000198214156123c3576123c36123de565b5060010190565b6000826123d9576123d96123f4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461241f57600080fd5b5056fea26469706673582212205d2e316a0238e345cf6bbf74e759d825b1a7fc5bf6128108c58761d10dbb469e64736f6c63430008020033a26469706673582212204605d7c05b80dfa2f5e92f0b09b4efe30032ebfa1e405c36d13d3c0d3b2bcbad64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80637cd07e47116100715780637cd07e471461012b5780639aab92481461013e578063a2e74af614610146578063c9c6539614610159578063e6a439051461016c578063f46901ed146101a0576100a9565b8063017e7e58146100ae578063094b7415146100de5780631e3dd18b146100f157806323cf311814610104578063574f2ba314610119575b600080fd5b6000546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100c1906001600160a01b031681565b6100c16100ff366004610677565b6101b3565b610117610112366004610624565b6101dd565b005b6004545b6040519081526020016100d5565b6002546100c1906001600160a01b031681565b61011d610232565b610117610154366004610624565b610264565b6100c1610167366004610645565b6102b0565b6100c161017a366004610645565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6101176101ae366004610624565b6105af565b600481815481106101c357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146102105760405162461bcd60e51b81526004016102079061068f565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600060405180602001610244906105fb565b6020820181038252601f19601f8201166040525080519060200120905090565b6001546001600160a01b0316331461028e5760405162461bcd60e51b81526004016102079061068f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156103145760405162461bcd60e51b815260206004820152601e60248201527f5265616374537761703a204944454e544943414c5f41444452455353455300006044820152606401610207565b600080836001600160a01b0316856001600160a01b03161061033757838561033a565b84845b90925090506001600160a01b0382166103955760405162461bcd60e51b815260206004820152601760248201527f5265616374537761703a205a45524f5f414444524553530000000000000000006044820152606401610207565b6001600160a01b038281166000908152600360209081526040808320858516845290915290205416156104035760405162461bcd60e51b81526020600482015260166024820152755265616374537761703a20504149525f45584953545360501b6044820152606401610207565b600060405180602001610415906105fb565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b1580156104c757600080fd5b505af11580156104db573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6001546001600160a01b031633146105d95760405162461bcd60e51b81526004016102079061068f565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612573806106be83390190565b80356001600160a01b038116811461061f57600080fd5b919050565b600060208284031215610635578081fd5b61063e82610608565b9392505050565b60008060408385031215610657578081fd5b61066083610608565b915061066e60208401610608565b90509250929050565b600060208284031215610688578081fd5b5035919050565b6020808252601490820152732932b0b1ba29bbb0b81d102327a92124a22222a760611b60408201526060019056fe60806040526001600c5534801561001557600080fd5b50604080518082018252601c81527f526561637453776170204c69717569646974792050726f7669646572000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f7ffc2b5e62d923da2a545560ba2c767bf9156d7c18b578446807165e0c8c94f3818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556124588061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610418578063d505accf1461042b578063dd62ed3e1461043e578063fff6cae914610469576101a9565b8063ba9a7a56146103e9578063bc25cf77146103f2578063c45a015514610405576101a9565b80637ecebe00116100d35780637ecebe001461036c57806389afcb441461038c57806395d89b41146103b4578063a9059cbb146103d6576101a9565b80636a6278421461033057806370a08231146103435780637464fc3d14610363576101a9565b806323b872dd116101665780633644e515116101405780633644e51514610302578063485cc9551461030b5780635909c0d51461031e5780635a3d549314610327576101a9565b806323b872dd146102ae57806330adf81f146102c1578063313ce567146102e8576101a9565b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610215578063095ea7b3146102495780630dfe16811461026c57806318160ddd14610297575b600080fd5b6101c16101bc366004612151565b610471565b005b6101ff6040518060400160405280601c81526020017f526561637453776170204c69717569646974792050726f76696465720000000081525081565b60405161020c919061224a565b60405180910390f35b61021d610967565b604080516001600160701b03948516815293909216602084015263ffffffff169082015260600161020c565b61025c6102573660046120ee565b610991565b604051901515815260200161020c565b60065461027f906001600160a01b031681565b6040516001600160a01b03909116815260200161020c565b6102a060005481565b60405190815260200161020c565b61025c6102bc366004612039565b6109a8565b6102a07f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102f0601281565b60405160ff909116815260200161020c565b6102a060035481565b6101c1610319366004612001565b610a3c565b6102a060095481565b6102a0600a5481565b6102a061033e366004611fc9565b610ab6565b6102a0610351366004611fc9565b60016020526000908152604090205481565b6102a0600b5481565b6102a061037a366004611fc9565b60046020526000908152604090205481565b61039f61039a366004611fc9565b610f43565b6040805192835260208301919091520161020c565b6101ff604051806040016040528060038152602001620524c560ec1b81525081565b61025c6103e43660046120ee565b6112e0565b6102a06103e881565b6101c1610400366004611fc9565b6112ed565b60055461027f906001600160a01b031681565b60075461027f906001600160a01b031681565b6101c1610439366004612079565b611410565b6102a061044c366004612001565b600260209081526000928352604080842090915290825290205481565b6101c1611617565b600c5460011461049c5760405162461bcd60e51b81526004016104939061227d565b60405180910390fd5b6000600c55841515806104af5750600084115b6104fb5760405162461bcd60e51b815260206004820181905260248201527f506169723a20494e53554646494349454e545f4f55545055545f414d4f554e546044820152606401610493565b600080610506610967565b5091509150816001600160701b03168710801561052b5750806001600160701b031686105b6105775760405162461bcd60e51b815260206004820152601c60248201527f506169723a20494e53554646494349454e545f4c4951554944495459000000006044820152606401610493565b60065460075460009182916001600160a01b039182169190811690891682148015906105b55750806001600160a01b0316896001600160a01b031614155b6105f45760405162461bcd60e51b815260206004820152601060248201526f506169723a20494e56414c49445f544f60801b6044820152606401610493565b8a1561060557610605828a8d611759565b891561061657610616818a8c611759565b8615610683576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906106509033908f908f908e908e906004016121fe565b600060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156106c257600080fd5b505afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa9190612139565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a082319060240160206040518083038186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190612139565b92505050600089856001600160701b031661078f9190612343565b831161079c5760006107b9565b6107af8a6001600160701b038716612343565b6107b99084612343565b905060006107d08a6001600160701b038716612343565b83116107dd5760006107fa565b6107f08a6001600160701b038716612343565b6107fa9084612343565b9050600082118061080b5750600081115b6108575760405162461bcd60e51b815260206004820152601f60248201527f506169723a20494e53554646494349454e545f494e5055545f414d4f554e54006044820152606401610493565b600061087961086784600361189c565b610873876103e861189c565b90611903565b9050600061088b61086784600361189c565b90506108b0620f42406108aa6001600160701b038b8116908b1661189c565b9061189c565b6108ba838361189c565b10156108f25760405162461bcd60e51b8152602060048201526007602482015266506169723a204b60c81b6044820152606401610493565b505061090084848888611959565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600061099e338484611b51565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610a27576001600160a01b0384166000908152600260209081526040808320338452909152902054610a029083611903565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610a32848484611bb3565b5060019392505050565b6005546001600160a01b03163314610a885760405162461bcd60e51b815260206004820152600f60248201526e2830b4b91d102327a92124a22222a760891b6044820152606401610493565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610ada5760405162461bcd60e51b81526004016104939061227d565b6000600c81905580610aea610967565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610b3757600080fd5b505afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f9190612139565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190612139565b90506000610c07836001600160701b038716611903565b90506000610c1e836001600160701b038716611903565b90506000610c2c8787611c59565b60005490915080610e125760055460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b158015610c7c57600080fd5b505afa158015610c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb49190611fe5565b9050336001600160a01b0382161415610d9557806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0057600080fd5b505afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d389190612139565b995060008a118015610d4c57506000198a14155b610d905760405162461bcd60e51b81526020600482015260156024820152744261642064657369726564206c697175696469747960581b6044820152606401610493565b610e0c565b6001600160a01b03811615610de55760405162461bcd60e51b815260206004820152601660248201527526bab9ba103737ba103430bb329036b4b3b930ba37b960511b6044820152606401610493565b610dfd6103e8610873610df8888861189c565b611da5565b9950610e0c60006103e8611e15565b50610e59565b610e566001600160701b038916610e29868461189c565b610e3391906122e1565b6001600160701b038916610e47868561189c565b610e5191906122e1565b611ea4565b98505b60008911610eb55760405162461bcd60e51b815260206004820152602360248201527f506169723a20494e53554646494349454e545f4c49515549444954595f4d494e60448201526215115160ea1b6064820152608401610493565b610ebf8a8a611e15565b610ecb86868a8a611959565b8115610ef557600854610ef1906001600160701b0380821691600160701b90041661189c565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610f685760405162461bcd60e51b81526004016104939061227d565b6000600c81905580610f78610967565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a082319060240160206040518083038186803b158015610fcd57600080fd5b505afa158015610fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110059190612139565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561104a57600080fd5b505afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110829190612139565b3060009081526001602052604081205491925061109f8888611c59565b600054909150806110b0848761189c565b6110ba91906122e1565b9a50806110c7848661189c565b6110d191906122e1565b995060008b1180156110e3575060008a115b61113b5760405162461bcd60e51b815260206004820152602360248201527f506169723a20494e53554646494349454e545f4c49515549444954595f42555260448201526213915160ea1b6064820152608401610493565b6111453084611ebc565b611150878d8d611759565b61115b868d8c611759565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a082319060240160206040518083038186803b15801561119a57600080fd5b505afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190612139565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a082319060240160206040518083038186803b15801561121457600080fd5b505afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612139565b935061125a85858b8b611959565b811561128457600854611280906001600160701b0380821691600160701b90041661189c565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b600061099e338484611bb3565b600c5460011461130f5760405162461bcd60e51b81526004016104939061227d565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916113b991849186916113b4916001600160701b039091169084906370a08231906024015b60206040518083038186803b15801561137c57600080fd5b505afa158015611390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108739190612139565b611759565b6008546040516370a0823160e01b815230600482015261140691839186916113b491600160701b9091046001600160701b0316906001600160a01b038516906370a0823190602401611364565b50506001600c5550565b4284101561144f5760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b6044820152606401610493565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876114a2836123af565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161151b92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611586573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906115bc5750886001600160a01b0316816001600160a01b0316145b6116015760405162461bcd60e51b8152602060048201526016602482015275524c503a20494e56414c49445f5349474e415455524560501b6044820152606401610493565b61160c898989611b51565b505050505050505050565b600c546001146116395760405162461bcd60e51b81526004016104939061227d565b6000600c556006546040516370a0823160e01b8152306004820152611752916001600160a01b0316906370a082319060240160206040518083038186803b15801561168357600080fd5b505afa158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190612139565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156116fe57600080fd5b505afa158015611712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117369190612139565b6008546001600160701b0380821691600160701b900416611959565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916117e591906121e2565b6000604051808303816000865af19150503d8060008114611822576040519150601f19603f3d011682016040523d82523d6000602084013e611827565b606091505b50915091508180156118515750805115806118515750808060200190518101906118519190612119565b6118955760405162461bcd60e51b815260206004820152601560248201527414185a5c8e881514905394d1915497d19052531151605a1b6044820152606401610493565b5050505050565b60008115806118c0575082826118b28183612324565b92506118be90836122e1565b145b6109a25760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610493565b6000826119108382612343565b91508111156109a25760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610493565b6001600160701b03841180159061197757506001600160701b038311155b6119b45760405162461bcd60e51b815260206004820152600e60248201526d506169723a204f564552464c4f5760901b6044820152606401610493565b60006119c5640100000000426123ca565b6008549091506000906119e590600160e01b900463ffffffff168361235a565b905060008163ffffffff16118015611a0557506001600160701b03841615155b8015611a1957506001600160701b03831615155b15611aa8578063ffffffff16611a4185611a3286611f46565b6001600160e01b031690611f5f565b6001600160e01b0316611a549190612324565b60096000828254611a6591906122a3565b909155505063ffffffff8116611a7e84611a3287611f46565b6001600160e01b0316611a919190612324565b600a6000828254611aa291906122a3565b90915550505b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff87160217928390556040805184841681529190930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054611bd69082611903565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611c059082611f74565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611ba69085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611caa57600080fd5b505afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190611fe5565b600b546001600160a01b038216158015945091925090611d91578015611d8c576000611d1d610df86001600160701b0388811690881661189c565b90506000611d2a83611da5565b905080821115611d89576000611d4c611d438484611903565b6000549061189c565b90506000611d6583611d5f86600561189c565b90611f74565b90506000611d7382846122e1565b90508015611d8557611d858782611e15565b5050505b50505b611d9d565b8015611d9d576000600b555b505092915050565b60006003821115611e065750806000611dbf6002836122e1565b611dca9060016122a3565b90505b81811015611e0057905080600281611de581866122e1565b611def91906122a3565b611df991906122e1565b9050611dcd565b50611e10565b8115611e10575060015b919050565b600054611e229082611f74565b60009081556001600160a01b038316815260016020526040902054611e479082611f74565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e989085815260200190565b60405180910390a35050565b6000818310611eb35781611eb5565b825b9392505050565b6001600160a01b038216600090815260016020526040902054611edf9082611903565b6001600160a01b03831660009081526001602052604081209190915554611f069082611903565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611e98565b60006109a2600160701b6001600160701b0384166122f5565b6000611eb56001600160701b038316846122bb565b600082611f8183826122a3565b91508110156109a25760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610493565b600060208284031215611fda578081fd5b8135611eb58161240a565b600060208284031215611ff6578081fd5b8151611eb58161240a565b60008060408385031215612013578081fd5b823561201e8161240a565b9150602083013561202e8161240a565b809150509250929050565b60008060006060848603121561204d578081fd5b83356120588161240a565b925060208401356120688161240a565b929592945050506040919091013590565b600080600080600080600060e0888a031215612093578283fd5b873561209e8161240a565b965060208801356120ae8161240a565b95506040880135945060608801359350608088013560ff811681146120d1578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612100578182fd5b823561210b8161240a565b946020939093013593505050565b60006020828403121561212a578081fd5b81518015158114611eb5578182fd5b60006020828403121561214a578081fd5b5051919050565b600080600080600060808688031215612168578081fd5b853594506020860135935060408601356121818161240a565b9250606086013567ffffffffffffffff8082111561219d578283fd5b818801915088601f8301126121b0578283fd5b8135818111156121be578384fd5b8960208285010111156121cf578384fd5b9699959850939650602001949392505050565b600082516121f481846020870161237f565b9190910192915050565b600060018060a01b038716825285602083015284604083015260806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b600060208252825180602084015261226981604085016020870161237f565b601f01601f19169190910160400192915050565b6020808252600c908201526b14185a5c8e881313d0d2d15160a21b604082015260600190565b600082198211156122b6576122b66123de565b500190565b60006001600160e01b03838116806122d5576122d56123f4565b92169190910492915050565b6000826122f0576122f06123f4565b500490565b60006001600160e01b038281168482168115158284048211161561231b5761231b6123de565b02949350505050565b600081600019048311821515161561233e5761233e6123de565b500290565b600082821015612355576123556123de565b500390565b600063ffffffff83811690831681811015612377576123776123de565b039392505050565b60005b8381101561239a578181015183820152602001612382565b838111156123a9576000848401525b50505050565b60006000198214156123c3576123c36123de565b5060010190565b6000826123d9576123d96123f4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461241f57600080fd5b5056fea26469706673582212205d2e316a0238e345cf6bbf74e759d825b1a7fc5bf6128108c58761d10dbb469e64736f6c63430008020033a26469706673582212204605d7c05b80dfa2f5e92f0b09b4efe30032ebfa1e405c36d13d3c0d3b2bcbad64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10661,
        "contract": "contracts/amm-v1/ReactSwapFactory.sol:ReactSwapFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10664,
        "contract": "contracts/amm-v1/ReactSwapFactory.sol:ReactSwapFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10667,
        "contract": "contracts/amm-v1/ReactSwapFactory.sol:ReactSwapFactory",
        "label": "migrator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10674,
        "contract": "contracts/amm-v1/ReactSwapFactory.sol:ReactSwapFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 10678,
        "contract": "contracts/amm-v1/ReactSwapFactory.sol:ReactSwapFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}